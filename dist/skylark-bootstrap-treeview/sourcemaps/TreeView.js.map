{"version":3,"sources":["TreeView.js"],"names":["define","skylark","langx","$","plugins","Widget","TreeView","inherit","klassName","pluginName","widgetClass","options","multiSelect","multiTier","nest","levels","selectors","children","classes","expandIcon","collapseIcon","item","injectStyle","emptyIcon","nodeIcon","selectedIcon","checkedIcon","uncheckedIcon","colors","normal","undefined","normalBack","border","onhover","selected","selectedBack","searchResult","searchResultBack","enableLinks","highlightSelected","highlightSearchResults","showBorder","showIcon","showCheckbox","showTags","search","ignoreCase","exactMatch","revealResults","noding","silent","ignoreChildren","templates","list","indent","icon","link","badge","onNodeChecked","onNodeCollapsed","onNodeDisabled","onNodeEnabled","onNodeExpanded","onNodeSelected","onNodeUnchecked","onNodeUnselected","onSearchComplete","onSearchCleared","css","_init","this","element","_elm","$element","elementId","id","styleId","tree","nodes","data","JSON","parse","extend","destroy","subscribeEvents","setInitialStates","render","reset","mixin","remove","datax","removeData","initialized","$wrapper","unsubscribeEvents","off","on","proxy","clickHandler","node","level","parent","_this","each","index","nodeId","length","parentId","hasOwnProperty","selectable","state","checked","disabled","expanded","push","event","preventDefault","target","findNode","classList","attr","split","indexOf","toggleExpandedState","toggleCheckedState","toggleSelectedState","closest","console","log","setExpandedState","trigger","setSelectedState","findNodes","setCheckedState","setDisabledState","addClass","empty","append","buildTree","treeItem","buildStyleOverride","i","join","pop","href","text","tags","tag","color","backColor","document","getElementById","buildStyle","appendTo","style","getNode","getParent","identifier","identifyNode","getSiblings","filter","obj","getSelected","getUnselected","getExpanded","getCollapsed","getChecked","getUnchecked","getDisabled","getEnabled","selectNode","identifiers","forEachIdentifier","unselectNode","toggleNodeSelected","collapseAll","collapseNode","expandAll","expandLevels","expandNode","revealNode","parentNode","toggleNodeExpanded","checkAll","checkNode","uncheckAll","uncheckNode","toggleNodeChecked","disableAll","disableNode","enableAll","enableNode","toggleNodeDisabled","callback","Array","pattern","clearSearch","results","modifier","attribute","grep","val","getNodeValue","match","RegExp","_obj","substring","_attr","toString","register","args","apply"],"mappings":"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","file":"../TreeView.js","sourcesContent":["define([\n  \"skylark-langx/skylark\",\n  \"skylark-langx/langx\",\n  \"skylark-domx-query\",\n  \"skylark-utils-dom/plugins\",\n  \"skylark-widgets-base/Widget\"  \n], function(skylark,langx,$,plugins,Widget) {\n\n  /*global jQuery, console*/\n\n  'use strict';\n\n\n  var TreeView =  Widget.inherit({\n    klassName: \"TreeView\",\n\n    pluginName : \"treeview\",\n\n    widgetClass : \"treeview\",\n\n    options : {\n      multiSelect: false,\n      //multiTier : false,\n      //levels: 2,\n\n      multiTier : {\n        nest   : true,\n      //  popup  : true,\n        levels : 2,\n        selectors :  {\n          children : \".list-group.children\"\n        },\n        classes : {\n          expandIcon: 'glyphicon glyphicon-plus',\n          collapseIcon: 'glyphicon glyphicon-minus',\n          children : \"list-group children\"\n        }\n      },\n\n      selectors : {\n        item : \".list-group-item\",\n        children : \".list-group\"\n      },\n\n      injectStyle: true,\n\n\n      emptyIcon: 'glyphicon',\n      nodeIcon: '',\n      selectedIcon: '',\n      checkedIcon: 'glyphicon glyphicon-check',\n      uncheckedIcon: 'glyphicon glyphicon-unchecked',\n\n\n      colors : {\n        normal: undefined, // '#000000',\n        normalBack: undefined, // '#FFFFFF',\n        border: undefined, // '#dddddd',\n        onhover: '#F5F5F5',\n        selected: '#FFFFFF',\n        selectedBack: '#428bca',\n        searchResult: '#D9534F',\n        searchResultBack: undefined //'#FFFFFF',\n      },\n\n\n      enableLinks: false,\n      highlightSelected: true,\n      highlightSearchResults: true,\n      showBorder: true,\n      showIcon: true,\n      showCheckbox: false,\n      showTags: false,\n\n      search : {\n        ignoreCase: true, \n        exactMatch: false,\n        revealResults: true    \n      },\n\n      noding : {\n        silent: false,\n        ignoreChildren: false\n      },\n\n\n      templates : {\n        list: '<ul class=\"list-group\"></ul>',\n        item: '<li class=\"list-group-item\"></li>',\n        indent: '<span class=\"indent\"></span>',\n        icon: '<span class=\"icon\"></span>',\n        link: '<a href=\"#\" style=\"color:inherit;\"></a>',\n        badge: '<span class=\"badge\"></span>'\n      },\n\n\n      // Event handlers\n      onNodeChecked: undefined,\n      onNodeCollapsed: undefined,\n      onNodeDisabled: undefined,\n      onNodeEnabled: undefined,\n      onNodeExpanded: undefined,\n      onNodeSelected: undefined,\n      onNodeUnchecked: undefined,\n      onNodeUnselected: undefined,\n      onSearchComplete: undefined,\n      onSearchCleared: undefined\n\n    },   \n\n\n    css : '.Tree .list-group-item{cursor:pointer}.Tree span.indent{margin-left:10px;margin-right:10px}.Tree span.icon{width:12px;margin-right:5px}.Tree .node-disabled{color:silver;cursor:not-allowed}' ,\n\n\n    _init : function () {\n\n      var options = this.options,\n          element = this._elm;\n\n      this.$element = $(element);\n      this.elementId = element.id;\n      this.styleId = this.elementId + '-style';\n\n\n      this.tree = [];\n      this.nodes = [];\n\n      if (options.data) {\n        if (typeof options.data === 'string') {\n          options.data = JSON.parse(options.data);\n        }\n        this.tree = langx.extend(true, [], options.data);\n      }\n\n      this.destroy();\n      this.subscribeEvents();\n      this.setInitialStates({ nodes: this.tree }, 0);\n      this.render();\n    },\n\n    reset : function(options) {\n      langx.mixin(this.options,options);\n    \treturn this._init();\n    },\n\n    remove : function () {\n      this.destroy();\n      datax.removeData(this, this.pluginName);\n      $('#' + this.styleId).remove();\n    },\n\n    destroy : function () {\n\n      if (!this.initialized) return;\n\n      this.$wrapper.remove();\n      this.$wrapper = null;\n\n      // Switch off events\n      this.unsubscribeEvents();\n\n      // Reset this.initialized flag\n      this.initialized = false;\n    },\n\n    unsubscribeEvents : function () {\n\n      this.$element.off('click');\n      this.$element.off('nodeChecked');\n      this.$element.off('nodeCollapsed');\n      this.$element.off('nodeDisabled');\n      this.$element.off('nodeEnabled');\n      this.$element.off('nodeExpanded');\n      this.$element.off('nodeSelected');\n      this.$element.off('nodeUnchecked');\n      this.$element.off('nodeUnselected');\n      this.$element.off('searchComplete');\n      this.$element.off('searchCleared');\n    },\n\n    subscribeEvents : function () {\n\n      this.unsubscribeEvents();\n\n      this.$element.on('click', langx.proxy(this.clickHandler, this));\n\n      if (typeof (this.options.onNodeChecked) === 'function') {\n        this.$element.on('nodeChecked', this.options.onNodeChecked);\n      }\n\n      if (typeof (this.options.onNodeCollapsed) === 'function') {\n        this.$element.on('nodeCollapsed', this.options.onNodeCollapsed);\n      }\n\n      if (typeof (this.options.onNodeDisabled) === 'function') {\n        this.$element.on('nodeDisabled', this.options.onNodeDisabled);\n      }\n\n      if (typeof (this.options.onNodeEnabled) === 'function') {\n        this.$element.on('nodeEnabled', this.options.onNodeEnabled);\n      }\n\n      if (typeof (this.options.onNodeExpanded) === 'function') {\n        this.$element.on('nodeExpanded', this.options.onNodeExpanded);\n      }\n\n      if (typeof (this.options.onNodeSelected) === 'function') {\n        this.$element.on('nodeSelected', this.options.onNodeSelected);\n      }\n\n      if (typeof (this.options.onNodeUnchecked) === 'function') {\n        this.$element.on('nodeUnchecked', this.options.onNodeUnchecked);\n      }\n\n      if (typeof (this.options.onNodeUnselected) === 'function') {\n        this.$element.on('nodeUnselected', this.options.onNodeUnselected);\n      }\n\n      if (typeof (this.options.onSearchComplete) === 'function') {\n        this.$element.on('searchComplete', this.options.onSearchComplete);\n      }\n\n      if (typeof (this.options.onSearchCleared) === 'function') {\n        this.$element.on('searchCleared', this.options.onSearchCleared);\n      }\n    },\n\n    /*\n      Recurse the tree structure and ensure all nodes have\n      valid initial states.  User defined states will be preserved.\n      For performance we also take this opportunity to\n      index nodes in a flattened structure\n    */\n    setInitialStates : function (node, level) {\n\n      if (!node.nodes) return;\n      level += 1;\n\n      var parent = node;\n      var _this = this;\n      langx.each(node.nodes, function checkStates(index, node) {\n\n        // nodeId : unique, incremental identifier\n        node.nodeId = _this.nodes.length;\n\n        // parentId : transversing up the tree\n        node.parentId = parent.nodeId;\n\n        // if not provided set selectable default value\n        if (!node.hasOwnProperty('selectable')) {\n          node.selectable = true;\n        }\n\n        // where provided we should preserve states\n        node.state = node.state || {};\n\n        // set checked state; unless set always false\n        if (!node.state.hasOwnProperty('checked')) {\n          node.state.checked = false;\n        }\n\n        // set enabled state; unless set always false\n        if (!node.state.hasOwnProperty('disabled')) {\n          node.state.disabled = false;\n        }\n\n        // set expanded state; if not provided based on levels\n        if (!node.state.hasOwnProperty('expanded')) {\n          if (!node.state.disabled &&\n              (level < _this.options.multiTier.levels) &&\n              (node.nodes && node.nodes.length > 0)) {\n            node.state.expanded = true;\n          }\n          else {\n            node.state.expanded = false;\n          }\n        }\n\n        // set selected state; unless set always false\n        if (!node.state.hasOwnProperty('selected')) {\n          node.state.selected = false;\n        }\n\n        // index nodes in a flattened structure for use later\n        _this.nodes.push(node);\n\n        // recurse child nodes and transverse the tree\n        if (node.nodes) {\n          _this.setInitialStates(node, level);\n        }\n      });\n    },\n\n    clickHandler : function (event) {\n\n      if (!this.options.enableLinks) event.preventDefault();\n\n      var target = $(event.target);\n      var node = this.findNode(target);\n      if (!node || node.state.disabled) return;\n      \n      var classList = target.attr('class') ? target.attr('class').split(' ') : [];\n      if ((classList.indexOf('expand-icon') !== -1)) {\n\n        this.toggleExpandedState(node,this.options.noding);\n        this.render();\n      }\n      else if ((classList.indexOf('check-icon') !== -1)) {\n        \n        this.toggleCheckedState(node,this.options.noding);\n        this.render();\n      }\n      else {\n        \n        if (node.selectable) {\n          this.toggleSelectedState(node,this.options.noding);\n        } else {\n          this.toggleExpandedState(node,this.options.noding);\n        }\n\n        this.render();\n      }\n    },\n\n    // Looks up the DOM for the closest parent list item to retrieve the\n    // data attribute nodeid, which is used to lookup the node in the flattened structure.\n    findNode : function (target) {\n\n      //var nodeId = target.closest('li.list-group-item').attr('data-nodeid');\n      var nodeId = target.closest(this.options.selectors.item).attr('data-nodeid');\n      var node = this.nodes[nodeId];\n\n      if (!node) {\n        console.log('Error: node does not exist');\n      }\n      return node;\n    },\n\n    toggleExpandedState : function (node, options) {\n      if (!node) return;\n      this.setExpandedState(node, !node.state.expanded, options);\n    },\n\n    setExpandedState : function (node, state, options) {\n\n      if (state === node.state.expanded) return;\n\n      if (state && node.nodes) {\n\n        // Expand a node\n        node.state.expanded = true;\n        if (!options.silent) {\n          this.$element.trigger('nodeExpanded', langx.extend(true, {}, node));\n        }\n      }\n      else if (!state) {\n\n        // Collapse a node\n        node.state.expanded = false;\n        if (!options.silent) {\n          this.$element.trigger('nodeCollapsed', langx.extend(true, {}, node));\n        }\n\n        // Collapse child nodes\n        if (node.nodes && !options.ignoreChildren) {\n          langx.each(node.nodes, langx.proxy(function (index, node) {\n            this.setExpandedState(node, false, options);\n          }, this));\n        }\n      }\n    },\n\n    toggleSelectedState : function (node, options) {\n      if (!node) return;\n      this.setSelectedState(node, !node.state.selected, options);\n    },\n\n    setSelectedState : function (node, state, options) {\n\n      if (state === node.state.selected) return;\n\n      if (state) {\n\n        // If multiSelect false, unselect previously selected\n        if (!this.options.multiSelect) {\n          langx.each(this.findNodes('true', 'g', 'state.selected'), langx.proxy(function (index, node) {\n            this.setSelectedState(node, false, options);\n          }, this));\n        }\n\n        // Continue selecting node\n        node.state.selected = true;\n        if (!options.silent) {\n          this.$element.trigger('nodeSelected', langx.extend(true, {}, node));\n        }\n      }\n      else {\n\n        // Unselect node\n        node.state.selected = false;\n        if (!options.silent) {\n          this.$element.trigger('nodeUnselected', langx.extend(true, {}, node));\n        }\n      }\n    },\n\n    toggleCheckedState : function (node, options) {\n      if (!node) return;\n      this.setCheckedState(node, !node.state.checked, options);\n    },\n\n    setCheckedState : function (node, state, options) {\n\n      if (state === node.state.checked) return;\n\n      if (state) {\n\n        // Check node\n        node.state.checked = true;\n\n        if (!options.silent) {\n          this.$element.trigger('nodeChecked', langx.extend(true, {}, node));\n        }\n      }\n      else {\n\n        // Uncheck node\n        node.state.checked = false;\n        if (!options.silent) {\n          this.$element.trigger('nodeUnchecked', langx.extend(true, {}, node));\n        }\n      }\n    },\n\n    setDisabledState : function (node, state, options) {\n\n      if (state === node.state.disabled) return;\n\n      if (state) {\n\n        // Disable node\n        node.state.disabled = true;\n\n        // Disable all other states\n        this.setExpandedState(node, false, options);\n        this.setSelectedState(node, false, options);\n        this.setCheckedState(node, false, options);\n\n        if (!options.silent) {\n          this.$element.trigger('nodeDisabled', langx.extend(true, {}, node));\n        }\n      }\n      else {\n\n        // Enabled node\n        node.state.disabled = false;\n        if (!options.silent) {\n          this.$element.trigger('nodeEnabled', langx.extend(true, {}, node));\n        }\n      }\n    },\n\n    render : function () {\n\n      if (!this.initialized) {\n\n        // Setup first time only components\n        this.$element.addClass(this.widgetClass);\n        this.$wrapper = $(this.options.templates.list);\n\n        this.injectStyle();\n\n        this.initialized = true;\n      }\n\n      this.$element.empty().append(this.$wrapper.empty());\n\n      // Build tree\n      this.buildTree(this.tree, 0);\n    },\n\n    // Starting from the root node, and recursing down the\n    // structure we build the tree one node at a time\n    buildTree : function (nodes, level) {\n\n      if (!nodes) return;\n      level += 1;\n\n      var _this = this;\n      langx.each(nodes, function addNodes(id, node) {\n\n        var treeItem = $(_this.options.templates.item)\n          .addClass('node-' + _this.elementId)\n          .addClass(node.state.checked ? 'node-checked' : '')\n          .addClass(node.state.disabled ? 'node-disabled': '')\n          .addClass(node.state.selected ? 'node-selected' : '')\n          .addClass(node.searchResult ? 'search-result' : '') \n          .attr('data-nodeid', node.nodeId)\n          .attr('style', _this.buildStyleOverride(node));\n\n        // Add indent/spacer to mimic tree structure\n        for (var i = 0; i < (level - 1); i++) {\n          treeItem.append(_this.options.templates.indent);\n        }\n\n        // Add expand, collapse or empty spacer icons\n        var classList = [];\n        if (node.nodes) {\n          classList.push('expand-icon');\n          if (node.state.expanded) {\n            classList.push(_this.options.multiTier.classes.collapseIcon);\n          }\n          else {\n            classList.push(_this.options.multiTier.classes.expandIcon);\n          }\n        }\n        else {\n          classList.push(_this.options.emptyIcon);\n        }\n\n        treeItem\n          .append($(_this.options.templates.icon)\n            .addClass(classList.join(' '))\n          );\n\n\n        // Add node icon\n        if (_this.options.showIcon) {\n          \n          var classList = ['node-icon'];\n\n          classList.push(node.icon || _this.options.nodeIcon);\n          if (node.state.selected) {\n            classList.pop();\n            classList.push(node.selectedIcon || _this.options.selectedIcon || \n                    node.icon || _this.options.nodeIcon);\n          }\n\n          treeItem\n            .append($(_this.options.templates.icon)\n              .addClass(classList.join(' '))\n            );\n        }\n\n        // Add check / unchecked icon\n        if (_this.options.showCheckbox) {\n\n          var classList = ['check-icon'];\n          if (node.state.checked) {\n            classList.push(_this.options.checkedIcon); \n          }\n          else {\n            classList.push(_this.options.uncheckedIcon);\n          }\n\n          treeItem\n            .append($(_this.options.templates.icon)\n              .addClass(classList.join(' '))\n            );\n        }\n\n        // Add text\n        if (_this.options.enableLinks) {\n          // Add hyperlink\n          treeItem\n            .append($(_this.options.templates.link)\n              .attr('href', node.href)\n              .append(node.text)\n            );\n        }\n        else {\n          // otherwise just text\n          treeItem\n            .append(node.text);\n        }\n\n        // Add tags as badges\n        if (_this.options.showTags && node.tags) {\n          langx.each(node.tags, function addTag(id, tag) {\n            treeItem\n              .append($(_this.options.templates.badge)\n                .append(tag)\n              );\n          });\n        }\n\n        // Add item to the tree\n        _this.$wrapper.append(treeItem);\n\n        // Recursively add child ndoes\n        if (node.nodes && node.state.expanded && !node.state.disabled) {\n          return _this.buildTree(node.nodes, level,treeItem);\n        }\n      });\n    },\n\n    // Define any node level style override for\n    // 1. selectedNode\n    // 2. node|data assigned color overrides\n    buildStyleOverride : function (node) {\n\n      if (node.state.disabled) return '';\n\n      var color = node.color;\n      var backColor = node.backColor;\n\n      if (this.options.highlightSelected && node.state.selected) {\n        if (this.options.colors.selected) {\n          color = this.options.colors.selected;\n        }\n        if (this.options.colors.selectedBack) {\n          backColor = this.options.colors.selectedBack;\n        }\n      }\n\n      if (this.options.highlightSearchResults && node.searchResult && !node.state.disabled) {\n        if (this.options.colors.searchResult) {\n          color = this.options.colors.searchResult;\n        }\n        if (this.options.colors.searchResultBack) {\n          backColor = this.options.colors.searchResultBack;\n        }\n      }\n\n      return 'color:' + color +\n        ';background-color:' + backColor + ';';\n    },\n\n    // Add inline style into head\n    injectStyle : function () {\n\n      if (this.options.injectStyle && !document.getElementById(this.styleId)) {\n        $('<style type=\"text/css\" id=\"' + this.styleId + '\"> ' + this.buildStyle() + ' </style>').appendTo('head');\n      }\n    },\n\n    // Construct trees style based on user options\n    buildStyle : function () {\n\n      var style = '.node-' + this.elementId + '{';\n\n      if (this.options.colors.normal) {\n        style += 'color:' + this.options.colors.normal + ';';\n      }\n\n      if (this.options.colors.normalBack) {\n        style += 'background-color:' + this.options.colors.normalBack + ';';\n      }\n\n      if (!this.options.showBorder) {\n        style += 'border:none;';\n      }\n      else if (this.options.colors.border) {\n        style += 'border:1px solid ' + this.options.colors.border + ';';\n      }\n      style += '}';\n\n      if (this.options.colors.onhover) {\n        style += '.node-' + this.elementId + ':not(.node-disabled):hover{' +\n          'background-color:' + this.options.colors.onhover + ';' +\n        '}';\n      }\n\n      return this.css + style;\n    },\n\n    /**\n      Returns a single node object that matches the given node id.\n      @param {Number} nodeId - A node's unique identifier\n      @return {Object} node - Matching node\n    */\n    getNode : function (nodeId) {\n      return this.nodes[nodeId];\n    },\n\n    /**\n      Returns the parent node of a given node, if valid otherwise returns undefined.\n      @param {Object|Number} identifier - A valid node or node id\n      @returns {Object} node - The parent node\n    */\n    getParent : function (identifier) {\n      var node = this.identifyNode(identifier);\n      return this.nodes[node.parentId];\n    },\n\n    /**\n      Returns an array of sibling nodes for a given node, if valid otherwise returns undefined.\n      @param {Object|Number} identifier - A valid node or node id\n      @returns {Array} nodes - Sibling nodes\n    */\n    getSiblings : function (identifier) {\n      var node = this.identifyNode(identifier);\n      var parent = this.getParent(node);\n      var nodes = parent ? parent.nodes : this.tree;\n      return nodes.filter(function (obj) {\n          return obj.nodeId !== node.nodeId;\n        });\n    },\n\n    /**\n      Returns an array of selected nodes.\n      @returns {Array} nodes - Selected nodes\n    */\n    getSelected : function () {\n      return this.findNodes('true', 'g', 'state.selected');\n    },\n\n    /**\n      Returns an array of unselected nodes.\n      @returns {Array} nodes - Unselected nodes\n    */\n    getUnselected : function () {\n      return this.findNodes('false', 'g', 'state.selected');\n    },\n\n    /**\n      Returns an array of expanded nodes.\n      @returns {Array} nodes - Expanded nodes\n    */\n    getExpanded : function () {\n      return this.findNodes('true', 'g', 'state.expanded');\n    },\n\n    /**\n      Returns an array of collapsed nodes.\n      @returns {Array} nodes - Collapsed nodes\n    */\n    getCollapsed : function () {\n      return this.findNodes('false', 'g', 'state.expanded');\n    },\n\n    /**\n      Returns an array of checked nodes.\n      @returns {Array} nodes - Checked nodes\n    */\n    getChecked : function () {\n      return this.findNodes('true', 'g', 'state.checked');\n    },\n\n    /**\n      Returns an array of unchecked nodes.\n      @returns {Array} nodes - Unchecked nodes\n    */\n    getUnchecked : function () {\n      return this.findNodes('false', 'g', 'state.checked');\n    },\n\n    /**\n      Returns an array of disabled nodes.\n      @returns {Array} nodes - Disabled nodes\n    */\n    getDisabled : function () {\n      return this.findNodes('true', 'g', 'state.disabled');\n    },\n\n    /**\n      Returns an array of enabled nodes.\n      @returns {Array} nodes - Enabled nodes\n    */\n    getEnabled : function () {\n      return this.findNodes('false', 'g', 'state.disabled');\n    },\n\n\n    /**\n      Set a node state to selected\n      @param {Object|Number} identifiers - A valid node, node id or array of node identifiers\n      @param {optional Object} options\n    */\n    selectNode : function (identifiers, options) {\n      this.forEachIdentifier(identifiers, options, langx.proxy(function (node, options) {\n        this.setSelectedState(node, true, options);\n      }, this));\n\n      this.render();\n    },\n\n    /**\n      Set a node state to unselected\n      @param {Object|Number} identifiers - A valid node, node id or array of node identifiers\n      @param {optional Object} options\n    */\n    unselectNode : function (identifiers, options) {\n      this.forEachIdentifier(identifiers, options, langx.proxy(function (node, options) {\n        this.setSelectedState(node, false, options);\n      }, this));\n\n      this.render();\n    },\n\n    /**\n      Toggles a node selected state; selecting if unselected, unselecting if selected.\n      @param {Object|Number} identifiers - A valid node, node id or array of node identifiers\n      @param {optional Object} options\n    */\n    toggleNodeSelected : function (identifiers, options) {\n      this.forEachIdentifier(identifiers, options, langx.proxy(function (node, options) {\n        this.toggleSelectedState(node, options);\n      }, this));\n\n      this.render();\n    },\n\n\n    /**\n      Collapse all tree nodes\n      @param {optional Object} options\n    */\n    collapseAll : function (options) {\n      var identifiers = this.findNodes('true', 'g', 'state.expanded');\n      this.forEachIdentifier(identifiers, options, langx.proxy(function (node, options) {\n        this.setExpandedState(node, false, options);\n      }, this));\n\n      this.render();\n    },\n\n    /**\n      Collapse a given tree node\n      @param {Object|Number} identifiers - A valid node, node id or array of node identifiers\n      @param {optional Object} options\n    */\n    collapseNode : function (identifiers, options) {\n      this.forEachIdentifier(identifiers, options, langx.proxy(function (node, options) {\n        this.setExpandedState(node, false, options);\n      }, this));\n\n      this.render();\n    },\n\n    /**\n      Expand all tree nodes\n      @param {optional Object} options\n    */\n    expandAll : function (options) {\n      options = langx.extend({},this.options.noding, options);\n\n      if (options && options.levels) {\n        this.expandLevels(this.tree, options.levels, options);\n      }\n      else {\n        var identifiers = this.findNodes('false', 'g', 'state.expanded');\n        this.forEachIdentifier(identifiers, options, langx.proxy(function (node, options) {\n          this.setExpandedState(node, true, options);\n        }, this));\n      }\n\n      this.render();\n    },\n\n    /**\n      Expand a given tree node\n      @param {Object|Number} identifiers - A valid node, node id or array of node identifiers\n      @param {optional Object} options\n    */\n    expandNode : function (identifiers, options) {\n      this.forEachIdentifier(identifiers, options, langx.proxy(function (node, options) {\n        this.setExpandedState(node, true, options);\n        if (node.nodes && (options && options.levels)) {\n          this.expandLevels(node.nodes, options.levels-1, options);\n        }\n      }, this));\n\n      this.render();\n    },\n\n    expandLevels : function (nodes, level, options) {\n      options = langx.extend({},this.options.noding, options);\n\n      langx.each(nodes, langx.proxy(function (index, node) {\n        this.setExpandedState(node, (level > 0) ? true : false, options);\n        if (node.nodes) {\n          this.expandLevels(node.nodes, level-1, options);\n        }\n      }, this));\n    },\n\n    /**\n      Reveals a given tree node, expanding the tree from node to root.\n      @param {Object|Number|Array} identifiers - A valid node, node id or array of node identifiers\n      @param {optional Object} options\n    */\n    revealNode : function (identifiers, options) {\n      this.forEachIdentifier(identifiers, options, langx.proxy(function (node, options) {\n        var parentNode = this.getParent(node);\n        while (parentNode) {\n          this.setExpandedState(parentNode, true, options);\n          parentNode = this.getParent(parentNode);\n        }\n      }, this));\n\n      this.render();\n    },\n\n    /**\n      Toggles a nodes expanded state; collapsing if expanded, expanding if collapsed.\n      @param {Object|Number} identifiers - A valid node, node id or array of node identifiers\n      @param {optional Object} options\n    */\n    toggleNodeExpanded : function (identifiers, options) {\n      this.forEachIdentifier(identifiers, options, langx.proxy(function (node, options) {\n        this.toggleExpandedState(node, options);\n      }, this));\n      \n      this.render();\n    },\n\n\n    /**\n      Check all tree nodes\n      @param {optional Object} options\n    */\n    checkAll : function (options) {\n      var identifiers = this.findNodes('false', 'g', 'state.checked');\n      this.forEachIdentifier(identifiers, options, langx.proxy(function (node, options) {\n        this.setCheckedState(node, true, options);\n      }, this));\n\n      this.render();\n    },\n\n    /**\n      Check a given tree node\n      @param {Object|Number} identifiers - A valid node, node id or array of node identifiers\n      @param {optional Object} options\n    */\n    checkNode : function (identifiers, options) {\n      this.forEachIdentifier(identifiers, options, langx.proxy(function (node, options) {\n        this.setCheckedState(node, true, options);\n      }, this));\n\n      this.render();\n    },\n\n    /**\n      Uncheck all tree nodes\n      @param {optional Object} options\n    */\n    uncheckAll : function (options) {\n      var identifiers = this.findNodes('true', 'g', 'state.checked');\n      this.forEachIdentifier(identifiers, options, langx.proxy(function (node, options) {\n        this.setCheckedState(node, false, options);\n      }, this));\n\n      this.render();\n    },\n\n    /**\n      Uncheck a given tree node\n      @param {Object|Number} identifiers - A valid node, node id or array of node identifiers\n      @param {optional Object} options\n    */\n    uncheckNode : function (identifiers, options) {\n      this.forEachIdentifier(identifiers, options, langx.proxy(function (node, options) {\n        this.setCheckedState(node, false, options);\n      }, this));\n\n      this.render();\n    },\n\n    /**\n      Toggles a nodes checked state; checking if unchecked, unchecking if checked.\n      @param {Object|Number} identifiers - A valid node, node id or array of node identifiers\n      @param {optional Object} options\n    */\n    toggleNodeChecked : function (identifiers, options) {\n      this.forEachIdentifier(identifiers, options, langx.proxy(function (node, options) {\n        this.toggleCheckedState(node, options);\n      }, this));\n\n      this.render();\n    },\n\n\n    /**\n      Disable all tree nodes\n      @param {optional Object} options\n    */\n    disableAll : function (options) {\n      var identifiers = this.findNodes('false', 'g', 'state.disabled');\n      this.forEachIdentifier(identifiers, options, langx.proxy(function (node, options) {\n        this.setDisabledState(node, true, options);\n      }, this));\n\n      this.render();\n    },\n\n    /**\n      Disable a given tree node\n      @param {Object|Number} identifiers - A valid node, node id or array of node identifiers\n      @param {optional Object} options\n    */\n    disableNode : function (identifiers, options) {\n      this.forEachIdentifier(identifiers, options, langx.proxy(function (node, options) {\n        this.setDisabledState(node, true, options);\n      }, this));\n\n      this.render();\n    },\n\n    /**\n      Enable all tree nodes\n      @param {optional Object} options\n    */\n    enableAll : function (options) {\n      var identifiers = this.findNodes('true', 'g', 'state.disabled');\n      this.forEachIdentifier(identifiers, options, langx.proxy(function (node, options) {\n        this.setDisabledState(node, false, options);\n      }, this));\n\n      this.render();\n    },\n\n    /**\n      Enable a given tree node\n      @param {Object|Number} identifiers - A valid node, node id or array of node identifiers\n      @param {optional Object} options\n    */\n    enableNode : function (identifiers, options) {\n      this.forEachIdentifier(identifiers, options, langx.proxy(function (node, options) {\n        this.setDisabledState(node, false, options);\n      }, this));\n\n      this.render();\n    },\n\n    /**\n      Toggles a nodes disabled state; disabling is enabled, enabling if disabled.\n      @param {Object|Number} identifiers - A valid node, node id or array of node identifiers\n      @param {optional Object} options\n    */\n    toggleNodeDisabled : function (identifiers, options) {\n      this.forEachIdentifier(identifiers, options, langx.proxy(function (node, options) {\n        this.setDisabledState(node, !node.state.disabled, options);\n      }, this));\n\n      this.render();\n    },\n\n\n    /**\n      Common code for processing multiple identifiers\n    */\n    forEachIdentifier : function (identifiers, options, callback) {\n\n      options = langx.extend({},this.options.noding, options);\n\n      if (!(identifiers instanceof Array)) {\n        identifiers = [identifiers];\n      }\n\n      langx.each(identifiers, langx.proxy(function (index, identifier) {\n        callback(this.identifyNode(identifier), options);\n      }, this));  \n    },\n\n    /*\n      Identifies a node from either a node id or object\n    */\n    identifyNode : function (identifier) {\n      return ((typeof identifier) === 'number') ?\n              this.nodes[identifier] :\n              identifier;\n    },\n\n    /**\n      Searches the tree for nodes (text) that match given criteria\n      @param {String} pattern - A given string to match against\n      @param {optional Object} options - Search criteria options\n      @return {Array} nodes - Matching nodes\n    */\n    search : function (pattern, options) {\n      options = langx.extend({},this.options.search, options);\n\n      this.clearSearch({ render: false });\n\n      var results = [];\n      if (pattern && pattern.length > 0) {\n\n        if (options.exactMatch) {\n          pattern = '^' + pattern + '$';\n        }\n\n        var modifier = 'g';\n        if (options.ignoreCase) {\n          modifier += 'i';\n        }\n\n        results = this.findNodes(pattern, modifier);\n\n        // Add searchResult property to all matching nodes\n        // This will be used to apply custom styles\n        // and when identifying result to be cleared\n        langx.each(results, function (index, node) {\n          node.searchResult = true;\n        })\n      }\n\n      // If revealResults, then render is triggered from revealNode\n      // otherwise we just call render.\n      if (options.revealResults) {\n        this.revealNode(results);\n      }\n      else {\n        this.render();\n      }\n\n      this.$element.trigger('searchComplete', langx.extend(true, {}, results));\n\n      return results;\n    },\n\n    /**\n      Clears previous search results\n    */\n    clearSearch : function (options) {\n\n      options = langx.extend({}, { render: true }, options);\n\n      var results = langx.each(this.findNodes('true', 'g', 'searchResult'), function (index, node) {\n        node.searchResult = false;\n      });\n\n      if (options.render) {\n        this.render();  \n      }\n      \n      this.$element.trigger('searchCleared', langx.extend(true, {}, results));\n    },\n\n    /**\n      Find nodes that match a given criteria\n      @param {String} pattern - A given string to match against\n      @param {optional String} modifier - Valid RegEx modifiers\n      @param {optional String} attribute - Attribute to compare pattern against\n      @return {Array} nodes - Nodes that match your criteria\n    */\n    findNodes : function (pattern, modifier, attribute) {\n\n      modifier = modifier || 'g';\n      attribute = attribute || 'text';\n\n      var _this = this;\n      return langx.grep(this.nodes, function (node) {\n        var val = _this.getNodeValue(node, attribute);\n        if (typeof val === 'string') {\n          return val.match(new RegExp(pattern, modifier));\n        }\n      });\n    },\n\n    /**\n      Recursive find for retrieving nested attributes values\n      All values are return as strings, unless invalid\n      @param {Object} obj - Typically a node, could be any object\n      @param {String} attr - Identifies an object property using dot notation\n      @return {String} value - Matching attributes string representation\n    */\n    getNodeValue : function (obj, attr) {\n      var index = attr.indexOf('.');\n      if (index > 0) {\n        var _obj = obj[attr.substring(0, index)];\n        var _attr = attr.substring(index + 1, attr.length);\n        return this.getNodeValue(_obj, _attr);\n      }\n      else {\n        if (obj.hasOwnProperty(attr)) {\n          return obj[attr].toString();\n        }\n        else {\n          return undefined;\n        }\n      }\n    }\n  });\n\n  plugins.register(TreeView,\"treeview\",function(options,args){\n\tif (typeof options === 'string') {\n\t\tif (!(args instanceof Array)) {\n\t\t\targs = [ args ];\n\t\t}\n\t\treturn this[options].apply(this, args);\n\t} else if (typeof options === 'boolean') {\n\t\treturn  this;\n\t} else {\n\t\tthis.reset(options);\n\t}\n\n   });\n\n  return TreeView;\n});"]}