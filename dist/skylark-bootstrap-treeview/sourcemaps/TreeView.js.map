{"version":3,"sources":["TreeView.js"],"names":["define","skylark","langx","$","plugins","_default","settings","injectStyle","levels","expandIcon","collapseIcon","emptyIcon","nodeIcon","selectedIcon","checkedIcon","uncheckedIcon","color","undefined","backColor","borderColor","onhoverColor","selectedColor","selectedBackColor","searchResultColor","searchResultBackColor","enableLinks","highlightSelected","highlightSearchResults","showBorder","showIcon","showCheckbox","showTags","multiSelect","onNodeChecked","onNodeCollapsed","onNodeDisabled","onNodeEnabled","onNodeExpanded","onNodeSelected","onNodeUnchecked","onNodeUnselected","onSearchComplete","onSearchCleared","options","silent","ignoreChildren","searchOptions","ignoreCase","exactMatch","revealResults","TreeView","Plugin","inherit","klassName","pluginName","template","list","item","indent","icon","link","badge","css","_construct","element","this","$element","elementId","id","styleId","init","tree","nodes","data","JSON","parse","extend","destroy","subscribeEvents","setInitialStates","render","remove","datax","removeData","initialized","$wrapper","unsubscribeEvents","off","on","proxy","clickHandler","node","level","parent","_this","each","index","nodeId","length","parentId","hasOwnProperty","selectable","state","checked","disabled","expanded","selected","push","event","preventDefault","target","findNode","classList","attr","split","indexOf","toggleExpandedState","toggleCheckedState","toggleSelectedState","closest","console","log","setExpandedState","trigger","setSelectedState","findNodes","setCheckedState","setDisabledState","addClass","empty","append","buildTree","treeItem","searchResult","buildStyleOverride","i","join","pop","href","text","tags","tag","document","getElementById","buildStyle","appendTo","style","getNode","getParent","identifier","identifyNode","getSiblings","filter","obj","getSelected","getUnselected","getExpanded","getCollapsed","getChecked","getUnchecked","getDisabled","getEnabled","selectNode","identifiers","forEachIdentifier","unselectNode","toggleNodeSelected","collapseAll","collapseNode","expandAll","expandLevels","expandNode","revealNode","parentNode","toggleNodeExpanded","checkAll","checkNode","uncheckAll","uncheckNode","toggleNodeChecked","disableAll","disableNode","enableAll","enableNode","toggleNodeDisabled","callback","Array","search","pattern","clearSearch","results","modifier","attribute","grep","val","getNodeValue","match","RegExp","_obj","substring","_attr","toString","register","args","apply","attach"],"mappings":"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","file":"../TreeView.js","sourcesContent":["define([\n\t\"skylark-langx/skylark\",\n\t\"skylark-langx/langx\",\n\t\"skylark-domx-query\",\n  \t\"skylark-utils-dom/plugins\"\n], function(skylark,langx,$,plugins) {\n\n\t/*global jQuery, console*/\n\n\t'use strict';\n\n\n\tvar pluginName = 'treeview';\n\n\tvar _default = {};\n\n\t_default.settings = {\n\n\t\tinjectStyle: true,\n\n\t\tlevels: 2,\n\n\t\texpandIcon: 'glyphicon glyphicon-plus',\n\t\tcollapseIcon: 'glyphicon glyphicon-minus',\n\t\temptyIcon: 'glyphicon',\n\t\tnodeIcon: '',\n\t\tselectedIcon: '',\n\t\tcheckedIcon: 'glyphicon glyphicon-check',\n\t\tuncheckedIcon: 'glyphicon glyphicon-unchecked',\n\n\t\tcolor: undefined, // '#000000',\n\t\tbackColor: undefined, // '#FFFFFF',\n\t\tborderColor: undefined, // '#dddddd',\n\t\tonhoverColor: '#F5F5F5',\n\t\tselectedColor: '#FFFFFF',\n\t\tselectedBackColor: '#428bca',\n\t\tsearchResultColor: '#D9534F',\n\t\tsearchResultBackColor: undefined, //'#FFFFFF',\n\n\t\tenableLinks: false,\n\t\thighlightSelected: true,\n\t\thighlightSearchResults: true,\n\t\tshowBorder: true,\n\t\tshowIcon: true,\n\t\tshowCheckbox: false,\n\t\tshowTags: false,\n\t\tmultiSelect: false,\n\n\t\t// Event handlers\n\t\tonNodeChecked: undefined,\n\t\tonNodeCollapsed: undefined,\n\t\tonNodeDisabled: undefined,\n\t\tonNodeEnabled: undefined,\n\t\tonNodeExpanded: undefined,\n\t\tonNodeSelected: undefined,\n\t\tonNodeUnchecked: undefined,\n\t\tonNodeUnselected: undefined,\n\t\tonSearchComplete: undefined,\n\t\tonSearchCleared: undefined\n\t};\n\n\t_default.options = {\n\t\tsilent: false,\n\t\tignoreChildren: false\n\t};\n\n\t_default.searchOptions = {\n\t\tignoreCase: true,\n\t\texactMatch: false,\n\t\trevealResults: true\n\t};\n\n\tvar TreeView =  plugins.Plugin.inherit({\n\t\tklassName: \"TreeView\",\n\n\t\tpluginName : \"bs3.TreeView\",\n\n\t\ttemplate : {\n\t\t\tlist: '<ul class=\"list-group\"></ul>',\n\t\t\titem: '<li class=\"list-group-item\"></li>',\n\t\t\tindent: '<span class=\"indent\"></span>',\n\t\t\ticon: '<span class=\"icon\"></span>',\n\t\t\tlink: '<a href=\"#\" style=\"color:inherit;\"></a>',\n\t\t\tbadge: '<span class=\"badge\"></span>'\n\t\t},\n\n\t\tcss : '.treeview .list-group-item{cursor:pointer}.treeview span.indent{margin-left:10px;margin-right:10px}.treeview span.icon{width:12px;margin-right:5px}.treeview .node-disabled{color:silver;cursor:not-allowed}' ,\n\n\t\t_construct : function (element, options) {\n\n\t\t\tthis.$element = $(element);\n\t\t\tthis.elementId = element.id;\n\t\t\tthis.styleId = this.elementId + '-style';\n\n\t\t\tthis.init(options);\n\t\t},\n\n\t\tinit : function (options) {\n\n\t\t\tthis.tree = [];\n\t\t\tthis.nodes = [];\n\n\t\t\tif (options.data) {\n\t\t\t\tif (typeof options.data === 'string') {\n\t\t\t\t\toptions.data = JSON.parse(options.data);\n\t\t\t\t}\n\t\t\t\tthis.tree = langx.extend(true, [], options.data);\n\t\t\t\tdelete options.data;\n\t\t\t}\n\t\t\tthis.options = langx.extend({}, _default.settings, options);\n\n\t\t\tthis.destroy();\n\t\t\tthis.subscribeEvents();\n\t\t\tthis.setInitialStates({ nodes: this.tree }, 0);\n\t\t\tthis.render();\n\t\t},\n\n\t\tremove : function () {\n\t\t\tthis.destroy();\n\t\t\tdatax.removeData(this, pluginName);\n\t\t\t$('#' + this.styleId).remove();\n\t\t},\n\n\t\tdestroy : function () {\n\n\t\t\tif (!this.initialized) return;\n\n\t\t\tthis.$wrapper.remove();\n\t\t\tthis.$wrapper = null;\n\n\t\t\t// Switch off events\n\t\t\tthis.unsubscribeEvents();\n\n\t\t\t// Reset this.initialized flag\n\t\t\tthis.initialized = false;\n\t\t},\n\n\t\tunsubscribeEvents : function () {\n\n\t\t\tthis.$element.off('click');\n\t\t\tthis.$element.off('nodeChecked');\n\t\t\tthis.$element.off('nodeCollapsed');\n\t\t\tthis.$element.off('nodeDisabled');\n\t\t\tthis.$element.off('nodeEnabled');\n\t\t\tthis.$element.off('nodeExpanded');\n\t\t\tthis.$element.off('nodeSelected');\n\t\t\tthis.$element.off('nodeUnchecked');\n\t\t\tthis.$element.off('nodeUnselected');\n\t\t\tthis.$element.off('searchComplete');\n\t\t\tthis.$element.off('searchCleared');\n\t\t},\n\n\t\tsubscribeEvents : function () {\n\n\t\t\tthis.unsubscribeEvents();\n\n\t\t\tthis.$element.on('click', langx.proxy(this.clickHandler, this));\n\n\t\t\tif (typeof (this.options.onNodeChecked) === 'function') {\n\t\t\t\tthis.$element.on('nodeChecked', this.options.onNodeChecked);\n\t\t\t}\n\n\t\t\tif (typeof (this.options.onNodeCollapsed) === 'function') {\n\t\t\t\tthis.$element.on('nodeCollapsed', this.options.onNodeCollapsed);\n\t\t\t}\n\n\t\t\tif (typeof (this.options.onNodeDisabled) === 'function') {\n\t\t\t\tthis.$element.on('nodeDisabled', this.options.onNodeDisabled);\n\t\t\t}\n\n\t\t\tif (typeof (this.options.onNodeEnabled) === 'function') {\n\t\t\t\tthis.$element.on('nodeEnabled', this.options.onNodeEnabled);\n\t\t\t}\n\n\t\t\tif (typeof (this.options.onNodeExpanded) === 'function') {\n\t\t\t\tthis.$element.on('nodeExpanded', this.options.onNodeExpanded);\n\t\t\t}\n\n\t\t\tif (typeof (this.options.onNodeSelected) === 'function') {\n\t\t\t\tthis.$element.on('nodeSelected', this.options.onNodeSelected);\n\t\t\t}\n\n\t\t\tif (typeof (this.options.onNodeUnchecked) === 'function') {\n\t\t\t\tthis.$element.on('nodeUnchecked', this.options.onNodeUnchecked);\n\t\t\t}\n\n\t\t\tif (typeof (this.options.onNodeUnselected) === 'function') {\n\t\t\t\tthis.$element.on('nodeUnselected', this.options.onNodeUnselected);\n\t\t\t}\n\n\t\t\tif (typeof (this.options.onSearchComplete) === 'function') {\n\t\t\t\tthis.$element.on('searchComplete', this.options.onSearchComplete);\n\t\t\t}\n\n\t\t\tif (typeof (this.options.onSearchCleared) === 'function') {\n\t\t\t\tthis.$element.on('searchCleared', this.options.onSearchCleared);\n\t\t\t}\n\t\t},\n\n\t\t/*\n\t\t\tRecurse the tree structure and ensure all nodes have\n\t\t\tvalid initial states.  User defined states will be preserved.\n\t\t\tFor performance we also take this opportunity to\n\t\t\tindex nodes in a flattened structure\n\t\t*/\n\t\tsetInitialStates : function (node, level) {\n\n\t\t\tif (!node.nodes) return;\n\t\t\tlevel += 1;\n\n\t\t\tvar parent = node;\n\t\t\tvar _this = this;\n\t\t\tlangx.each(node.nodes, function checkStates(index, node) {\n\n\t\t\t\t// nodeId : unique, incremental identifier\n\t\t\t\tnode.nodeId = _this.nodes.length;\n\n\t\t\t\t// parentId : transversing up the tree\n\t\t\t\tnode.parentId = parent.nodeId;\n\n\t\t\t\t// if not provided set selectable default value\n\t\t\t\tif (!node.hasOwnProperty('selectable')) {\n\t\t\t\t\tnode.selectable = true;\n\t\t\t\t}\n\n\t\t\t\t// where provided we should preserve states\n\t\t\t\tnode.state = node.state || {};\n\n\t\t\t\t// set checked state; unless set always false\n\t\t\t\tif (!node.state.hasOwnProperty('checked')) {\n\t\t\t\t\tnode.state.checked = false;\n\t\t\t\t}\n\n\t\t\t\t// set enabled state; unless set always false\n\t\t\t\tif (!node.state.hasOwnProperty('disabled')) {\n\t\t\t\t\tnode.state.disabled = false;\n\t\t\t\t}\n\n\t\t\t\t// set expanded state; if not provided based on levels\n\t\t\t\tif (!node.state.hasOwnProperty('expanded')) {\n\t\t\t\t\tif (!node.state.disabled &&\n\t\t\t\t\t\t\t(level < _this.options.levels) &&\n\t\t\t\t\t\t\t(node.nodes && node.nodes.length > 0)) {\n\t\t\t\t\t\tnode.state.expanded = true;\n\t\t\t\t\t}\n\t\t\t\t\telse {\n\t\t\t\t\t\tnode.state.expanded = false;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\t// set selected state; unless set always false\n\t\t\t\tif (!node.state.hasOwnProperty('selected')) {\n\t\t\t\t\tnode.state.selected = false;\n\t\t\t\t}\n\n\t\t\t\t// index nodes in a flattened structure for use later\n\t\t\t\t_this.nodes.push(node);\n\n\t\t\t\t// recurse child nodes and transverse the tree\n\t\t\t\tif (node.nodes) {\n\t\t\t\t\t_this.setInitialStates(node, level);\n\t\t\t\t}\n\t\t\t});\n\t\t},\n\n\t\tclickHandler : function (event) {\n\n\t\t\tif (!this.options.enableLinks) event.preventDefault();\n\n\t\t\tvar target = $(event.target);\n\t\t\tvar node = this.findNode(target);\n\t\t\tif (!node || node.state.disabled) return;\n\t\t\t\n\t\t\tvar classList = target.attr('class') ? target.attr('class').split(' ') : [];\n\t\t\tif ((classList.indexOf('expand-icon') !== -1)) {\n\n\t\t\t\tthis.toggleExpandedState(node, _default.options);\n\t\t\t\tthis.render();\n\t\t\t}\n\t\t\telse if ((classList.indexOf('check-icon') !== -1)) {\n\t\t\t\t\n\t\t\t\tthis.toggleCheckedState(node, _default.options);\n\t\t\t\tthis.render();\n\t\t\t}\n\t\t\telse {\n\t\t\t\t\n\t\t\t\tif (node.selectable) {\n\t\t\t\t\tthis.toggleSelectedState(node, _default.options);\n\t\t\t\t} else {\n\t\t\t\t\tthis.toggleExpandedState(node, _default.options);\n\t\t\t\t}\n\n\t\t\t\tthis.render();\n\t\t\t}\n\t\t},\n\n\t\t// Looks up the DOM for the closest parent list item to retrieve the\n\t\t// data attribute nodeid, which is used to lookup the node in the flattened structure.\n\t\tfindNode : function (target) {\n\n\t\t\tvar nodeId = target.closest('li.list-group-item').attr('data-nodeid');\n\t\t\tvar node = this.nodes[nodeId];\n\n\t\t\tif (!node) {\n\t\t\t\tconsole.log('Error: node does not exist');\n\t\t\t}\n\t\t\treturn node;\n\t\t},\n\n\t\ttoggleExpandedState : function (node, options) {\n\t\t\tif (!node) return;\n\t\t\tthis.setExpandedState(node, !node.state.expanded, options);\n\t\t},\n\n\t\tsetExpandedState : function (node, state, options) {\n\n\t\t\tif (state === node.state.expanded) return;\n\n\t\t\tif (state && node.nodes) {\n\n\t\t\t\t// Expand a node\n\t\t\t\tnode.state.expanded = true;\n\t\t\t\tif (!options.silent) {\n\t\t\t\t\tthis.$element.trigger('nodeExpanded', langx.extend(true, {}, node));\n\t\t\t\t}\n\t\t\t}\n\t\t\telse if (!state) {\n\n\t\t\t\t// Collapse a node\n\t\t\t\tnode.state.expanded = false;\n\t\t\t\tif (!options.silent) {\n\t\t\t\t\tthis.$element.trigger('nodeCollapsed', langx.extend(true, {}, node));\n\t\t\t\t}\n\n\t\t\t\t// Collapse child nodes\n\t\t\t\tif (node.nodes && !options.ignoreChildren) {\n\t\t\t\t\tlangx.each(node.nodes, langx.proxy(function (index, node) {\n\t\t\t\t\t\tthis.setExpandedState(node, false, options);\n\t\t\t\t\t}, this));\n\t\t\t\t}\n\t\t\t}\n\t\t},\n\n\t\ttoggleSelectedState : function (node, options) {\n\t\t\tif (!node) return;\n\t\t\tthis.setSelectedState(node, !node.state.selected, options);\n\t\t},\n\n\t\tsetSelectedState : function (node, state, options) {\n\n\t\t\tif (state === node.state.selected) return;\n\n\t\t\tif (state) {\n\n\t\t\t\t// If multiSelect false, unselect previously selected\n\t\t\t\tif (!this.options.multiSelect) {\n\t\t\t\t\tlangx.each(this.findNodes('true', 'g', 'state.selected'), langx.proxy(function (index, node) {\n\t\t\t\t\t\tthis.setSelectedState(node, false, options);\n\t\t\t\t\t}, this));\n\t\t\t\t}\n\n\t\t\t\t// Continue selecting node\n\t\t\t\tnode.state.selected = true;\n\t\t\t\tif (!options.silent) {\n\t\t\t\t\tthis.$element.trigger('nodeSelected', langx.extend(true, {}, node));\n\t\t\t\t}\n\t\t\t}\n\t\t\telse {\n\n\t\t\t\t// Unselect node\n\t\t\t\tnode.state.selected = false;\n\t\t\t\tif (!options.silent) {\n\t\t\t\t\tthis.$element.trigger('nodeUnselected', langx.extend(true, {}, node));\n\t\t\t\t}\n\t\t\t}\n\t\t},\n\n\t\ttoggleCheckedState : function (node, options) {\n\t\t\tif (!node) return;\n\t\t\tthis.setCheckedState(node, !node.state.checked, options);\n\t\t},\n\n\t\tsetCheckedState : function (node, state, options) {\n\n\t\t\tif (state === node.state.checked) return;\n\n\t\t\tif (state) {\n\n\t\t\t\t// Check node\n\t\t\t\tnode.state.checked = true;\n\n\t\t\t\tif (!options.silent) {\n\t\t\t\t\tthis.$element.trigger('nodeChecked', langx.extend(true, {}, node));\n\t\t\t\t}\n\t\t\t}\n\t\t\telse {\n\n\t\t\t\t// Uncheck node\n\t\t\t\tnode.state.checked = false;\n\t\t\t\tif (!options.silent) {\n\t\t\t\t\tthis.$element.trigger('nodeUnchecked', langx.extend(true, {}, node));\n\t\t\t\t}\n\t\t\t}\n\t\t},\n\n\t\tsetDisabledState : function (node, state, options) {\n\n\t\t\tif (state === node.state.disabled) return;\n\n\t\t\tif (state) {\n\n\t\t\t\t// Disable node\n\t\t\t\tnode.state.disabled = true;\n\n\t\t\t\t// Disable all other states\n\t\t\t\tthis.setExpandedState(node, false, options);\n\t\t\t\tthis.setSelectedState(node, false, options);\n\t\t\t\tthis.setCheckedState(node, false, options);\n\n\t\t\t\tif (!options.silent) {\n\t\t\t\t\tthis.$element.trigger('nodeDisabled', langx.extend(true, {}, node));\n\t\t\t\t}\n\t\t\t}\n\t\t\telse {\n\n\t\t\t\t// Enabled node\n\t\t\t\tnode.state.disabled = false;\n\t\t\t\tif (!options.silent) {\n\t\t\t\t\tthis.$element.trigger('nodeEnabled', langx.extend(true, {}, node));\n\t\t\t\t}\n\t\t\t}\n\t\t},\n\n\t\trender : function () {\n\n\t\t\tif (!this.initialized) {\n\n\t\t\t\t// Setup first time only components\n\t\t\t\tthis.$element.addClass(pluginName);\n\t\t\t\tthis.$wrapper = $(this.template.list);\n\n\t\t\t\tthis.injectStyle();\n\n\t\t\t\tthis.initialized = true;\n\t\t\t}\n\n\t\t\tthis.$element.empty().append(this.$wrapper.empty());\n\n\t\t\t// Build tree\n\t\t\tthis.buildTree(this.tree, 0);\n\t\t},\n\n\t\t// Starting from the root node, and recursing down the\n\t\t// structure we build the tree one node at a time\n\t\tbuildTree : function (nodes, level) {\n\n\t\t\tif (!nodes) return;\n\t\t\tlevel += 1;\n\n\t\t\tvar _this = this;\n\t\t\tlangx.each(nodes, function addNodes(id, node) {\n\n\t\t\t\tvar treeItem = $(_this.template.item)\n\t\t\t\t\t.addClass('node-' + _this.elementId)\n\t\t\t\t\t.addClass(node.state.checked ? 'node-checked' : '')\n\t\t\t\t\t.addClass(node.state.disabled ? 'node-disabled': '')\n\t\t\t\t\t.addClass(node.state.selected ? 'node-selected' : '')\n\t\t\t\t\t.addClass(node.searchResult ? 'search-result' : '') \n\t\t\t\t\t.attr('data-nodeid', node.nodeId)\n\t\t\t\t\t.attr('style', _this.buildStyleOverride(node));\n\n\t\t\t\t// Add indent/spacer to mimic tree structure\n\t\t\t\tfor (var i = 0; i < (level - 1); i++) {\n\t\t\t\t\ttreeItem.append(_this.template.indent);\n\t\t\t\t}\n\n\t\t\t\t// Add expand, collapse or empty spacer icons\n\t\t\t\tvar classList = [];\n\t\t\t\tif (node.nodes) {\n\t\t\t\t\tclassList.push('expand-icon');\n\t\t\t\t\tif (node.state.expanded) {\n\t\t\t\t\t\tclassList.push(_this.options.collapseIcon);\n\t\t\t\t\t}\n\t\t\t\t\telse {\n\t\t\t\t\t\tclassList.push(_this.options.expandIcon);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\tclassList.push(_this.options.emptyIcon);\n\t\t\t\t}\n\n\t\t\t\ttreeItem\n\t\t\t\t\t.append($(_this.template.icon)\n\t\t\t\t\t\t.addClass(classList.join(' '))\n\t\t\t\t\t);\n\n\n\t\t\t\t// Add node icon\n\t\t\t\tif (_this.options.showIcon) {\n\t\t\t\t\t\n\t\t\t\t\tvar classList = ['node-icon'];\n\n\t\t\t\t\tclassList.push(node.icon || _this.options.nodeIcon);\n\t\t\t\t\tif (node.state.selected) {\n\t\t\t\t\t\tclassList.pop();\n\t\t\t\t\t\tclassList.push(node.selectedIcon || _this.options.selectedIcon || \n\t\t\t\t\t\t\t\t\t\tnode.icon || _this.options.nodeIcon);\n\t\t\t\t\t}\n\n\t\t\t\t\ttreeItem\n\t\t\t\t\t\t.append($(_this.template.icon)\n\t\t\t\t\t\t\t.addClass(classList.join(' '))\n\t\t\t\t\t\t);\n\t\t\t\t}\n\n\t\t\t\t// Add check / unchecked icon\n\t\t\t\tif (_this.options.showCheckbox) {\n\n\t\t\t\t\tvar classList = ['check-icon'];\n\t\t\t\t\tif (node.state.checked) {\n\t\t\t\t\t\tclassList.push(_this.options.checkedIcon); \n\t\t\t\t\t}\n\t\t\t\t\telse {\n\t\t\t\t\t\tclassList.push(_this.options.uncheckedIcon);\n\t\t\t\t\t}\n\n\t\t\t\t\ttreeItem\n\t\t\t\t\t\t.append($(_this.template.icon)\n\t\t\t\t\t\t\t.addClass(classList.join(' '))\n\t\t\t\t\t\t);\n\t\t\t\t}\n\n\t\t\t\t// Add text\n\t\t\t\tif (_this.options.enableLinks) {\n\t\t\t\t\t// Add hyperlink\n\t\t\t\t\ttreeItem\n\t\t\t\t\t\t.append($(_this.template.link)\n\t\t\t\t\t\t\t.attr('href', node.href)\n\t\t\t\t\t\t\t.append(node.text)\n\t\t\t\t\t\t);\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\t// otherwise just text\n\t\t\t\t\ttreeItem\n\t\t\t\t\t\t.append(node.text);\n\t\t\t\t}\n\n\t\t\t\t// Add tags as badges\n\t\t\t\tif (_this.options.showTags && node.tags) {\n\t\t\t\t\tlangx.each(node.tags, function addTag(id, tag) {\n\t\t\t\t\t\ttreeItem\n\t\t\t\t\t\t\t.append($(_this.template.badge)\n\t\t\t\t\t\t\t\t.append(tag)\n\t\t\t\t\t\t\t);\n\t\t\t\t\t});\n\t\t\t\t}\n\n\t\t\t\t// Add item to the tree\n\t\t\t\t_this.$wrapper.append(treeItem);\n\n\t\t\t\t// Recursively add child ndoes\n\t\t\t\tif (node.nodes && node.state.expanded && !node.state.disabled) {\n\t\t\t\t\treturn _this.buildTree(node.nodes, level);\n\t\t\t\t}\n\t\t\t});\n\t\t},\n\n\t\t// Define any node level style override for\n\t\t// 1. selectedNode\n\t\t// 2. node|data assigned color overrides\n\t\tbuildStyleOverride : function (node) {\n\n\t\t\tif (node.state.disabled) return '';\n\n\t\t\tvar color = node.color;\n\t\t\tvar backColor = node.backColor;\n\n\t\t\tif (this.options.highlightSelected && node.state.selected) {\n\t\t\t\tif (this.options.selectedColor) {\n\t\t\t\t\tcolor = this.options.selectedColor;\n\t\t\t\t}\n\t\t\t\tif (this.options.selectedBackColor) {\n\t\t\t\t\tbackColor = this.options.selectedBackColor;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (this.options.highlightSearchResults && node.searchResult && !node.state.disabled) {\n\t\t\t\tif (this.options.searchResultColor) {\n\t\t\t\t\tcolor = this.options.searchResultColor;\n\t\t\t\t}\n\t\t\t\tif (this.options.searchResultBackColor) {\n\t\t\t\t\tbackColor = this.options.searchResultBackColor;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn 'color:' + color +\n\t\t\t\t';background-color:' + backColor + ';';\n\t\t},\n\n\t\t// Add inline style into head\n\t\tinjectStyle : function () {\n\n\t\t\tif (this.options.injectStyle && !document.getElementById(this.styleId)) {\n\t\t\t\t$('<style type=\"text/css\" id=\"' + this.styleId + '\"> ' + this.buildStyle() + ' </style>').appendTo('head');\n\t\t\t}\n\t\t},\n\n\t\t// Construct trees style based on user options\n\t\tbuildStyle : function () {\n\n\t\t\tvar style = '.node-' + this.elementId + '{';\n\n\t\t\tif (this.options.color) {\n\t\t\t\tstyle += 'color:' + this.options.color + ';';\n\t\t\t}\n\n\t\t\tif (this.options.backColor) {\n\t\t\t\tstyle += 'background-color:' + this.options.backColor + ';';\n\t\t\t}\n\n\t\t\tif (!this.options.showBorder) {\n\t\t\t\tstyle += 'border:none;';\n\t\t\t}\n\t\t\telse if (this.options.borderColor) {\n\t\t\t\tstyle += 'border:1px solid ' + this.options.borderColor + ';';\n\t\t\t}\n\t\t\tstyle += '}';\n\n\t\t\tif (this.options.onhoverColor) {\n\t\t\t\tstyle += '.node-' + this.elementId + ':not(.node-disabled):hover{' +\n\t\t\t\t\t'background-color:' + this.options.onhoverColor + ';' +\n\t\t\t\t'}';\n\t\t\t}\n\n\t\t\treturn this.css + style;\n\t\t},\n\n\t\t/**\n\t\t\tReturns a single node object that matches the given node id.\n\t\t\t@param {Number} nodeId - A node's unique identifier\n\t\t\t@return {Object} node - Matching node\n\t\t*/\n\t\tgetNode : function (nodeId) {\n\t\t\treturn this.nodes[nodeId];\n\t\t},\n\n\t\t/**\n\t\t\tReturns the parent node of a given node, if valid otherwise returns undefined.\n\t\t\t@param {Object|Number} identifier - A valid node or node id\n\t\t\t@returns {Object} node - The parent node\n\t\t*/\n\t\tgetParent : function (identifier) {\n\t\t\tvar node = this.identifyNode(identifier);\n\t\t\treturn this.nodes[node.parentId];\n\t\t},\n\n\t\t/**\n\t\t\tReturns an array of sibling nodes for a given node, if valid otherwise returns undefined.\n\t\t\t@param {Object|Number} identifier - A valid node or node id\n\t\t\t@returns {Array} nodes - Sibling nodes\n\t\t*/\n\t\tgetSiblings : function (identifier) {\n\t\t\tvar node = this.identifyNode(identifier);\n\t\t\tvar parent = this.getParent(node);\n\t\t\tvar nodes = parent ? parent.nodes : this.tree;\n\t\t\treturn nodes.filter(function (obj) {\n\t\t\t\t\treturn obj.nodeId !== node.nodeId;\n\t\t\t\t});\n\t\t},\n\n\t\t/**\n\t\t\tReturns an array of selected nodes.\n\t\t\t@returns {Array} nodes - Selected nodes\n\t\t*/\n\t\tgetSelected : function () {\n\t\t\treturn this.findNodes('true', 'g', 'state.selected');\n\t\t},\n\n\t\t/**\n\t\t\tReturns an array of unselected nodes.\n\t\t\t@returns {Array} nodes - Unselected nodes\n\t\t*/\n\t\tgetUnselected : function () {\n\t\t\treturn this.findNodes('false', 'g', 'state.selected');\n\t\t},\n\n\t\t/**\n\t\t\tReturns an array of expanded nodes.\n\t\t\t@returns {Array} nodes - Expanded nodes\n\t\t*/\n\t\tgetExpanded : function () {\n\t\t\treturn this.findNodes('true', 'g', 'state.expanded');\n\t\t},\n\n\t\t/**\n\t\t\tReturns an array of collapsed nodes.\n\t\t\t@returns {Array} nodes - Collapsed nodes\n\t\t*/\n\t\tgetCollapsed : function () {\n\t\t\treturn this.findNodes('false', 'g', 'state.expanded');\n\t\t},\n\n\t\t/**\n\t\t\tReturns an array of checked nodes.\n\t\t\t@returns {Array} nodes - Checked nodes\n\t\t*/\n\t\tgetChecked : function () {\n\t\t\treturn this.findNodes('true', 'g', 'state.checked');\n\t\t},\n\n\t\t/**\n\t\t\tReturns an array of unchecked nodes.\n\t\t\t@returns {Array} nodes - Unchecked nodes\n\t\t*/\n\t\tgetUnchecked : function () {\n\t\t\treturn this.findNodes('false', 'g', 'state.checked');\n\t\t},\n\n\t\t/**\n\t\t\tReturns an array of disabled nodes.\n\t\t\t@returns {Array} nodes - Disabled nodes\n\t\t*/\n\t\tgetDisabled : function () {\n\t\t\treturn this.findNodes('true', 'g', 'state.disabled');\n\t\t},\n\n\t\t/**\n\t\t\tReturns an array of enabled nodes.\n\t\t\t@returns {Array} nodes - Enabled nodes\n\t\t*/\n\t\tgetEnabled : function () {\n\t\t\treturn this.findNodes('false', 'g', 'state.disabled');\n\t\t},\n\n\n\t\t/**\n\t\t\tSet a node state to selected\n\t\t\t@param {Object|Number} identifiers - A valid node, node id or array of node identifiers\n\t\t\t@param {optional Object} options\n\t\t*/\n\t\tselectNode : function (identifiers, options) {\n\t\t\tthis.forEachIdentifier(identifiers, options, langx.proxy(function (node, options) {\n\t\t\t\tthis.setSelectedState(node, true, options);\n\t\t\t}, this));\n\n\t\t\tthis.render();\n\t\t},\n\n\t\t/**\n\t\t\tSet a node state to unselected\n\t\t\t@param {Object|Number} identifiers - A valid node, node id or array of node identifiers\n\t\t\t@param {optional Object} options\n\t\t*/\n\t\tunselectNode : function (identifiers, options) {\n\t\t\tthis.forEachIdentifier(identifiers, options, langx.proxy(function (node, options) {\n\t\t\t\tthis.setSelectedState(node, false, options);\n\t\t\t}, this));\n\n\t\t\tthis.render();\n\t\t},\n\n\t\t/**\n\t\t\tToggles a node selected state; selecting if unselected, unselecting if selected.\n\t\t\t@param {Object|Number} identifiers - A valid node, node id or array of node identifiers\n\t\t\t@param {optional Object} options\n\t\t*/\n\t\ttoggleNodeSelected : function (identifiers, options) {\n\t\t\tthis.forEachIdentifier(identifiers, options, langx.proxy(function (node, options) {\n\t\t\t\tthis.toggleSelectedState(node, options);\n\t\t\t}, this));\n\n\t\t\tthis.render();\n\t\t},\n\n\n\t\t/**\n\t\t\tCollapse all tree nodes\n\t\t\t@param {optional Object} options\n\t\t*/\n\t\tcollapseAll : function (options) {\n\t\t\tvar identifiers = this.findNodes('true', 'g', 'state.expanded');\n\t\t\tthis.forEachIdentifier(identifiers, options, langx.proxy(function (node, options) {\n\t\t\t\tthis.setExpandedState(node, false, options);\n\t\t\t}, this));\n\n\t\t\tthis.render();\n\t\t},\n\n\t\t/**\n\t\t\tCollapse a given tree node\n\t\t\t@param {Object|Number} identifiers - A valid node, node id or array of node identifiers\n\t\t\t@param {optional Object} options\n\t\t*/\n\t\tcollapseNode : function (identifiers, options) {\n\t\t\tthis.forEachIdentifier(identifiers, options, langx.proxy(function (node, options) {\n\t\t\t\tthis.setExpandedState(node, false, options);\n\t\t\t}, this));\n\n\t\t\tthis.render();\n\t\t},\n\n\t\t/**\n\t\t\tExpand all tree nodes\n\t\t\t@param {optional Object} options\n\t\t*/\n\t\texpandAll : function (options) {\n\t\t\toptions = langx.extend({}, _default.options, options);\n\n\t\t\tif (options && options.levels) {\n\t\t\t\tthis.expandLevels(this.tree, options.levels, options);\n\t\t\t}\n\t\t\telse {\n\t\t\t\tvar identifiers = this.findNodes('false', 'g', 'state.expanded');\n\t\t\t\tthis.forEachIdentifier(identifiers, options, langx.proxy(function (node, options) {\n\t\t\t\t\tthis.setExpandedState(node, true, options);\n\t\t\t\t}, this));\n\t\t\t}\n\n\t\t\tthis.render();\n\t\t},\n\n\t\t/**\n\t\t\tExpand a given tree node\n\t\t\t@param {Object|Number} identifiers - A valid node, node id or array of node identifiers\n\t\t\t@param {optional Object} options\n\t\t*/\n\t\texpandNode : function (identifiers, options) {\n\t\t\tthis.forEachIdentifier(identifiers, options, langx.proxy(function (node, options) {\n\t\t\t\tthis.setExpandedState(node, true, options);\n\t\t\t\tif (node.nodes && (options && options.levels)) {\n\t\t\t\t\tthis.expandLevels(node.nodes, options.levels-1, options);\n\t\t\t\t}\n\t\t\t}, this));\n\n\t\t\tthis.render();\n\t\t},\n\n\t\texpandLevels : function (nodes, level, options) {\n\t\t\toptions = langx.extend({}, _default.options, options);\n\n\t\t\tlangx.each(nodes, langx.proxy(function (index, node) {\n\t\t\t\tthis.setExpandedState(node, (level > 0) ? true : false, options);\n\t\t\t\tif (node.nodes) {\n\t\t\t\t\tthis.expandLevels(node.nodes, level-1, options);\n\t\t\t\t}\n\t\t\t}, this));\n\t\t},\n\n\t\t/**\n\t\t\tReveals a given tree node, expanding the tree from node to root.\n\t\t\t@param {Object|Number|Array} identifiers - A valid node, node id or array of node identifiers\n\t\t\t@param {optional Object} options\n\t\t*/\n\t\trevealNode : function (identifiers, options) {\n\t\t\tthis.forEachIdentifier(identifiers, options, langx.proxy(function (node, options) {\n\t\t\t\tvar parentNode = this.getParent(node);\n\t\t\t\twhile (parentNode) {\n\t\t\t\t\tthis.setExpandedState(parentNode, true, options);\n\t\t\t\t\tparentNode = this.getParent(parentNode);\n\t\t\t\t}\n\t\t\t}, this));\n\n\t\t\tthis.render();\n\t\t},\n\n\t\t/**\n\t\t\tToggles a nodes expanded state; collapsing if expanded, expanding if collapsed.\n\t\t\t@param {Object|Number} identifiers - A valid node, node id or array of node identifiers\n\t\t\t@param {optional Object} options\n\t\t*/\n\t\ttoggleNodeExpanded : function (identifiers, options) {\n\t\t\tthis.forEachIdentifier(identifiers, options, langx.proxy(function (node, options) {\n\t\t\t\tthis.toggleExpandedState(node, options);\n\t\t\t}, this));\n\t\t\t\n\t\t\tthis.render();\n\t\t},\n\n\n\t\t/**\n\t\t\tCheck all tree nodes\n\t\t\t@param {optional Object} options\n\t\t*/\n\t\tcheckAll : function (options) {\n\t\t\tvar identifiers = this.findNodes('false', 'g', 'state.checked');\n\t\t\tthis.forEachIdentifier(identifiers, options, langx.proxy(function (node, options) {\n\t\t\t\tthis.setCheckedState(node, true, options);\n\t\t\t}, this));\n\n\t\t\tthis.render();\n\t\t},\n\n\t\t/**\n\t\t\tCheck a given tree node\n\t\t\t@param {Object|Number} identifiers - A valid node, node id or array of node identifiers\n\t\t\t@param {optional Object} options\n\t\t*/\n\t\tcheckNode : function (identifiers, options) {\n\t\t\tthis.forEachIdentifier(identifiers, options, langx.proxy(function (node, options) {\n\t\t\t\tthis.setCheckedState(node, true, options);\n\t\t\t}, this));\n\n\t\t\tthis.render();\n\t\t},\n\n\t\t/**\n\t\t\tUncheck all tree nodes\n\t\t\t@param {optional Object} options\n\t\t*/\n\t\tuncheckAll : function (options) {\n\t\t\tvar identifiers = this.findNodes('true', 'g', 'state.checked');\n\t\t\tthis.forEachIdentifier(identifiers, options, langx.proxy(function (node, options) {\n\t\t\t\tthis.setCheckedState(node, false, options);\n\t\t\t}, this));\n\n\t\t\tthis.render();\n\t\t},\n\n\t\t/**\n\t\t\tUncheck a given tree node\n\t\t\t@param {Object|Number} identifiers - A valid node, node id or array of node identifiers\n\t\t\t@param {optional Object} options\n\t\t*/\n\t\tuncheckNode : function (identifiers, options) {\n\t\t\tthis.forEachIdentifier(identifiers, options, langx.proxy(function (node, options) {\n\t\t\t\tthis.setCheckedState(node, false, options);\n\t\t\t}, this));\n\n\t\t\tthis.render();\n\t\t},\n\n\t\t/**\n\t\t\tToggles a nodes checked state; checking if unchecked, unchecking if checked.\n\t\t\t@param {Object|Number} identifiers - A valid node, node id or array of node identifiers\n\t\t\t@param {optional Object} options\n\t\t*/\n\t\ttoggleNodeChecked : function (identifiers, options) {\n\t\t\tthis.forEachIdentifier(identifiers, options, langx.proxy(function (node, options) {\n\t\t\t\tthis.toggleCheckedState(node, options);\n\t\t\t}, this));\n\n\t\t\tthis.render();\n\t\t},\n\n\n\t\t/**\n\t\t\tDisable all tree nodes\n\t\t\t@param {optional Object} options\n\t\t*/\n\t\tdisableAll : function (options) {\n\t\t\tvar identifiers = this.findNodes('false', 'g', 'state.disabled');\n\t\t\tthis.forEachIdentifier(identifiers, options, langx.proxy(function (node, options) {\n\t\t\t\tthis.setDisabledState(node, true, options);\n\t\t\t}, this));\n\n\t\t\tthis.render();\n\t\t},\n\n\t\t/**\n\t\t\tDisable a given tree node\n\t\t\t@param {Object|Number} identifiers - A valid node, node id or array of node identifiers\n\t\t\t@param {optional Object} options\n\t\t*/\n\t\tdisableNode : function (identifiers, options) {\n\t\t\tthis.forEachIdentifier(identifiers, options, langx.proxy(function (node, options) {\n\t\t\t\tthis.setDisabledState(node, true, options);\n\t\t\t}, this));\n\n\t\t\tthis.render();\n\t\t},\n\n\t\t/**\n\t\t\tEnable all tree nodes\n\t\t\t@param {optional Object} options\n\t\t*/\n\t\tenableAll : function (options) {\n\t\t\tvar identifiers = this.findNodes('true', 'g', 'state.disabled');\n\t\t\tthis.forEachIdentifier(identifiers, options, langx.proxy(function (node, options) {\n\t\t\t\tthis.setDisabledState(node, false, options);\n\t\t\t}, this));\n\n\t\t\tthis.render();\n\t\t},\n\n\t\t/**\n\t\t\tEnable a given tree node\n\t\t\t@param {Object|Number} identifiers - A valid node, node id or array of node identifiers\n\t\t\t@param {optional Object} options\n\t\t*/\n\t\tenableNode : function (identifiers, options) {\n\t\t\tthis.forEachIdentifier(identifiers, options, langx.proxy(function (node, options) {\n\t\t\t\tthis.setDisabledState(node, false, options);\n\t\t\t}, this));\n\n\t\t\tthis.render();\n\t\t},\n\n\t\t/**\n\t\t\tToggles a nodes disabled state; disabling is enabled, enabling if disabled.\n\t\t\t@param {Object|Number} identifiers - A valid node, node id or array of node identifiers\n\t\t\t@param {optional Object} options\n\t\t*/\n\t\ttoggleNodeDisabled : function (identifiers, options) {\n\t\t\tthis.forEachIdentifier(identifiers, options, langx.proxy(function (node, options) {\n\t\t\t\tthis.setDisabledState(node, !node.state.disabled, options);\n\t\t\t}, this));\n\n\t\t\tthis.render();\n\t\t},\n\n\n\t\t/**\n\t\t\tCommon code for processing multiple identifiers\n\t\t*/\n\t\tforEachIdentifier : function (identifiers, options, callback) {\n\n\t\t\toptions = langx.extend({}, _default.options, options);\n\n\t\t\tif (!(identifiers instanceof Array)) {\n\t\t\t\tidentifiers = [identifiers];\n\t\t\t}\n\n\t\t\tlangx.each(identifiers, langx.proxy(function (index, identifier) {\n\t\t\t\tcallback(this.identifyNode(identifier), options);\n\t\t\t}, this));\t\n\t\t},\n\n\t\t/*\n\t\t\tIdentifies a node from either a node id or object\n\t\t*/\n\t\tidentifyNode : function (identifier) {\n\t\t\treturn ((typeof identifier) === 'number') ?\n\t\t\t\t\t\t\tthis.nodes[identifier] :\n\t\t\t\t\t\t\tidentifier;\n\t\t},\n\n\t\t/**\n\t\t\tSearches the tree for nodes (text) that match given criteria\n\t\t\t@param {String} pattern - A given string to match against\n\t\t\t@param {optional Object} options - Search criteria options\n\t\t\t@return {Array} nodes - Matching nodes\n\t\t*/\n\t\tsearch : function (pattern, options) {\n\t\t\toptions = langx.extend({}, _default.searchOptions, options);\n\n\t\t\tthis.clearSearch({ render: false });\n\n\t\t\tvar results = [];\n\t\t\tif (pattern && pattern.length > 0) {\n\n\t\t\t\tif (options.exactMatch) {\n\t\t\t\t\tpattern = '^' + pattern + '$';\n\t\t\t\t}\n\n\t\t\t\tvar modifier = 'g';\n\t\t\t\tif (options.ignoreCase) {\n\t\t\t\t\tmodifier += 'i';\n\t\t\t\t}\n\n\t\t\t\tresults = this.findNodes(pattern, modifier);\n\n\t\t\t\t// Add searchResult property to all matching nodes\n\t\t\t\t// This will be used to apply custom styles\n\t\t\t\t// and when identifying result to be cleared\n\t\t\t\tlangx.each(results, function (index, node) {\n\t\t\t\t\tnode.searchResult = true;\n\t\t\t\t})\n\t\t\t}\n\n\t\t\t// If revealResults, then render is triggered from revealNode\n\t\t\t// otherwise we just call render.\n\t\t\tif (options.revealResults) {\n\t\t\t\tthis.revealNode(results);\n\t\t\t}\n\t\t\telse {\n\t\t\t\tthis.render();\n\t\t\t}\n\n\t\t\tthis.$element.trigger('searchComplete', langx.extend(true, {}, results));\n\n\t\t\treturn results;\n\t\t},\n\n\t\t/**\n\t\t\tClears previous search results\n\t\t*/\n\t\tclearSearch : function (options) {\n\n\t\t\toptions = langx.extend({}, { render: true }, options);\n\n\t\t\tvar results = langx.each(this.findNodes('true', 'g', 'searchResult'), function (index, node) {\n\t\t\t\tnode.searchResult = false;\n\t\t\t});\n\n\t\t\tif (options.render) {\n\t\t\t\tthis.render();\t\n\t\t\t}\n\t\t\t\n\t\t\tthis.$element.trigger('searchCleared', langx.extend(true, {}, results));\n\t\t},\n\n\t\t/**\n\t\t\tFind nodes that match a given criteria\n\t\t\t@param {String} pattern - A given string to match against\n\t\t\t@param {optional String} modifier - Valid RegEx modifiers\n\t\t\t@param {optional String} attribute - Attribute to compare pattern against\n\t\t\t@return {Array} nodes - Nodes that match your criteria\n\t\t*/\n\t\tfindNodes : function (pattern, modifier, attribute) {\n\n\t\t\tmodifier = modifier || 'g';\n\t\t\tattribute = attribute || 'text';\n\n\t\t\tvar _this = this;\n\t\t\treturn langx.grep(this.nodes, function (node) {\n\t\t\t\tvar val = _this.getNodeValue(node, attribute);\n\t\t\t\tif (typeof val === 'string') {\n\t\t\t\t\treturn val.match(new RegExp(pattern, modifier));\n\t\t\t\t}\n\t\t\t});\n\t\t},\n\n\t\t/**\n\t\t\tRecursive find for retrieving nested attributes values\n\t\t\tAll values are return as strings, unless invalid\n\t\t\t@param {Object} obj - Typically a node, could be any object\n\t\t\t@param {String} attr - Identifies an object property using dot notation\n\t\t\t@return {String} value - Matching attributes string representation\n\t\t*/\n\t\tgetNodeValue : function (obj, attr) {\n\t\t\tvar index = attr.indexOf('.');\n\t\t\tif (index > 0) {\n\t\t\t\tvar _obj = obj[attr.substring(0, index)];\n\t\t\t\tvar _attr = attr.substring(index + 1, attr.length);\n\t\t\t\treturn this.getNodeValue(_obj, _attr);\n\t\t\t}\n\t\t\telse {\n\t\t\t\tif (obj.hasOwnProperty(attr)) {\n\t\t\t\t\treturn obj[attr].toString();\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\treturn undefined;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t});\n\n\tvar logError = function (message) {\n\t\tif (window.console) {\n\t\t\twindow.console.error(message);\n\t\t}\n\t};\n\n\n    plugins.register(TreeView,\"treeview\",function(options,args){\n\t\tif (typeof options === 'string') {\n\t\t\tif (!(args instanceof Array)) {\n\t\t\t\targs = [ args ];\n\t\t\t}\n\t\t\treturn this[options].apply(this, args);\n\t\t} else if (typeof options === 'boolean') {\n\t\t\treturn  this;\n\t\t} else {\n//\t\t\tthis.init(options);\n\t\t\treturn this;\n\t\t}\n\n    });\n\n\treturn skylark.attach(\"intg.bs3.TreeView\",TreeView);\n});"]}