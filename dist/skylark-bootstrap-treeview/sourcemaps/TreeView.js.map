{"version":3,"sources":["TreeView.js"],"names":["define","skylark","langx","$","plugins","_default","settings","injectStyle","levels","expandIcon","collapseIcon","emptyIcon","nodeIcon","selectedIcon","checkedIcon","uncheckedIcon","color","undefined","backColor","borderColor","onhoverColor","selectedColor","selectedBackColor","searchResultColor","searchResultBackColor","enableLinks","highlightSelected","highlightSearchResults","showBorder","showIcon","showCheckbox","showTags","multiSelect","onNodeChecked","onNodeCollapsed","onNodeDisabled","onNodeEnabled","onNodeExpanded","onNodeSelected","onNodeUnchecked","onNodeUnselected","onSearchComplete","onSearchCleared","options","silent","ignoreChildren","searchOptions","ignoreCase","exactMatch","revealResults","TreeView","Plugin","inherit","klassName","pluginName","template","list","item","indent","icon","link","badge","css","_construct","element","this","$element","elementId","id","styleId","init","proxy","remove","getNode","getParent","getSiblings","getSelected","getUnselected","getExpanded","getCollapsed","getChecked","getUnchecked","getDisabled","getEnabled","selectNode","unselectNode","toggleNodeSelected","collapseAll","collapseNode","expandAll","expandNode","toggleNodeExpanded","revealNode","checkAll","checkNode","uncheckAll","uncheckNode","toggleNodeChecked","disableAll","disableNode","enableAll","enableNode","toggleNodeDisabled","search","clearSearch","tree","nodes","data","parseJSON","extend","destroy","subscribeEvents","setInitialStates","render","datax","removeData","initialized","$wrapper","unsubscribeEvents","off","on","clickHandler","node","level","parent","_this","each","index","nodeId","length","parentId","hasOwnProperty","selectable","state","checked","disabled","expanded","selected","push","event","preventDefault","target","findNode","classList","attr","split","indexOf","toggleExpandedState","toggleCheckedState","toggleSelectedState","closest","console","log","setExpandedState","trigger","setSelectedState","findNodes","setCheckedState","setDisabledState","addClass","empty","append","buildTree","treeItem","searchResult","buildStyleOverride","i","join","pop","href","text","tags","tag","document","getElementById","buildStyle","appendTo","style","identifier","identifyNode","filter","obj","identifiers","forEachIdentifier","expandLevels","parentNode","callback","Array","pattern","results","modifier","attribute","grep","val","getNodeValue","match","RegExp","_obj","substring","_attr","toString","register","attach"],"mappings":"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","file":"../TreeView.js","sourcesContent":["define([\n\t\"skylark-langx/skylark\",\n\t\"skylark-langx/langx\",\n\t\"skylark-domx-query\",\n  \t\"skylark-utils-dom/plugins\"\n], function(skylark,langx,$,plugins) {\n\n\t/*global jQuery, console*/\n\n\t'use strict';\n\n\n\tvar pluginName = 'treeview';\n\n\tvar _default = {};\n\n\t_default.settings = {\n\n\t\tinjectStyle: true,\n\n\t\tlevels: 2,\n\n\t\texpandIcon: 'glyphicon glyphicon-plus',\n\t\tcollapseIcon: 'glyphicon glyphicon-minus',\n\t\temptyIcon: 'glyphicon',\n\t\tnodeIcon: '',\n\t\tselectedIcon: '',\n\t\tcheckedIcon: 'glyphicon glyphicon-check',\n\t\tuncheckedIcon: 'glyphicon glyphicon-unchecked',\n\n\t\tcolor: undefined, // '#000000',\n\t\tbackColor: undefined, // '#FFFFFF',\n\t\tborderColor: undefined, // '#dddddd',\n\t\tonhoverColor: '#F5F5F5',\n\t\tselectedColor: '#FFFFFF',\n\t\tselectedBackColor: '#428bca',\n\t\tsearchResultColor: '#D9534F',\n\t\tsearchResultBackColor: undefined, //'#FFFFFF',\n\n\t\tenableLinks: false,\n\t\thighlightSelected: true,\n\t\thighlightSearchResults: true,\n\t\tshowBorder: true,\n\t\tshowIcon: true,\n\t\tshowCheckbox: false,\n\t\tshowTags: false,\n\t\tmultiSelect: false,\n\n\t\t// Event handlers\n\t\tonNodeChecked: undefined,\n\t\tonNodeCollapsed: undefined,\n\t\tonNodeDisabled: undefined,\n\t\tonNodeEnabled: undefined,\n\t\tonNodeExpanded: undefined,\n\t\tonNodeSelected: undefined,\n\t\tonNodeUnchecked: undefined,\n\t\tonNodeUnselected: undefined,\n\t\tonSearchComplete: undefined,\n\t\tonSearchCleared: undefined\n\t};\n\n\t_default.options = {\n\t\tsilent: false,\n\t\tignoreChildren: false\n\t};\n\n\t_default.searchOptions = {\n\t\tignoreCase: true,\n\t\texactMatch: false,\n\t\trevealResults: true\n\t};\n\n\tvar TreeView =  plugins.Plugin.inherit({\n\t\tklassName: \"TreeView\",\n\n\t\tpluginName : \"bs3.TreeView\",\n\n\t\ttemplate : {\n\t\t\tlist: '<ul class=\"list-group\"></ul>',\n\t\t\titem: '<li class=\"list-group-item\"></li>',\n\t\t\tindent: '<span class=\"indent\"></span>',\n\t\t\ticon: '<span class=\"icon\"></span>',\n\t\t\tlink: '<a href=\"#\" style=\"color:inherit;\"></a>',\n\t\t\tbadge: '<span class=\"badge\"></span>'\n\t\t},\n\n\t\tcss : '.treeview .list-group-item{cursor:pointer}.treeview span.indent{margin-left:10px;margin-right:10px}.treeview span.icon{width:12px;margin-right:5px}.treeview .node-disabled{color:silver;cursor:not-allowed}' ,\n\n\t\t_construct : function (element, options) {\n\n\t\t\tthis.$element = $(element);\n\t\t\tthis.elementId = element.id;\n\t\t\tthis.styleId = this.elementId + '-style';\n\n\t\t\tthis.init(options);\n\n\t\t\treturn {\n\n\t\t\t\t// Options (public access)\n\t\t\t\toptions: this.options,\n\n\t\t\t\t// Initialize / destroy methods\n\t\t\t\tinit: langx.proxy(this.init, this),\n\t\t\t\tremove: langx.proxy(this.remove, this),\n\n\t\t\t\t// Get methods\n\t\t\t\tgetNode: langx.proxy(this.getNode, this),\n\t\t\t\tgetParent: langx.proxy(this.getParent, this),\n\t\t\t\tgetSiblings: langx.proxy(this.getSiblings, this),\n\t\t\t\tgetSelected: langx.proxy(this.getSelected, this),\n\t\t\t\tgetUnselected: langx.proxy(this.getUnselected, this),\n\t\t\t\tgetExpanded: langx.proxy(this.getExpanded, this),\n\t\t\t\tgetCollapsed: langx.proxy(this.getCollapsed, this),\n\t\t\t\tgetChecked: langx.proxy(this.getChecked, this),\n\t\t\t\tgetUnchecked: langx.proxy(this.getUnchecked, this),\n\t\t\t\tgetDisabled: langx.proxy(this.getDisabled, this),\n\t\t\t\tgetEnabled: langx.proxy(this.getEnabled, this),\n\n\t\t\t\t// Select methods\n\t\t\t\tselectNode: langx.proxy(this.selectNode, this),\n\t\t\t\tunselectNode: langx.proxy(this.unselectNode, this),\n\t\t\t\ttoggleNodeSelected: langx.proxy(this.toggleNodeSelected, this),\n\n\t\t\t\t// Expand / collapse methods\n\t\t\t\tcollapseAll: langx.proxy(this.collapseAll, this),\n\t\t\t\tcollapseNode: langx.proxy(this.collapseNode, this),\n\t\t\t\texpandAll: langx.proxy(this.expandAll, this),\n\t\t\t\texpandNode: langx.proxy(this.expandNode, this),\n\t\t\t\ttoggleNodeExpanded: langx.proxy(this.toggleNodeExpanded, this),\n\t\t\t\trevealNode: langx.proxy(this.revealNode, this),\n\n\t\t\t\t// Expand / collapse methods\n\t\t\t\tcheckAll: langx.proxy(this.checkAll, this),\n\t\t\t\tcheckNode: langx.proxy(this.checkNode, this),\n\t\t\t\tuncheckAll: langx.proxy(this.uncheckAll, this),\n\t\t\t\tuncheckNode: langx.proxy(this.uncheckNode, this),\n\t\t\t\ttoggleNodeChecked: langx.proxy(this.toggleNodeChecked, this),\n\n\t\t\t\t// Disable / enable methods\n\t\t\t\tdisableAll: langx.proxy(this.disableAll, this),\n\t\t\t\tdisableNode: langx.proxy(this.disableNode, this),\n\t\t\t\tenableAll: langx.proxy(this.enableAll, this),\n\t\t\t\tenableNode: langx.proxy(this.enableNode, this),\n\t\t\t\ttoggleNodeDisabled: langx.proxy(this.toggleNodeDisabled, this),\n\n\t\t\t\t// Search methods\n\t\t\t\tsearch: langx.proxy(this.search, this),\n\t\t\t\tclearSearch: langx.proxy(this.clearSearch, this)\n\t\t\t};\n\t\t},\n\n\t\tinit : function (options) {\n\n\t\t\tthis.tree = [];\n\t\t\tthis.nodes = [];\n\n\t\t\tif (options.data) {\n\t\t\t\tif (typeof options.data === 'string') {\n\t\t\t\t\toptions.data = langx.parseJSON(options.data);\n\t\t\t\t}\n\t\t\t\tthis.tree = langx.extend(true, [], options.data);\n\t\t\t\tdelete options.data;\n\t\t\t}\n\t\t\tthis.options = langx.extend({}, _default.settings, options);\n\n\t\t\tthis.destroy();\n\t\t\tthis.subscribeEvents();\n\t\t\tthis.setInitialStates({ nodes: this.tree }, 0);\n\t\t\tthis.render();\n\t\t},\n\n\t\tremove : function () {\n\t\t\tthis.destroy();\n\t\t\tdatax.removeData(this, pluginName);\n\t\t\t$('#' + this.styleId).remove();\n\t\t},\n\n\t\tdestroy : function () {\n\n\t\t\tif (!this.initialized) return;\n\n\t\t\tthis.$wrapper.remove();\n\t\t\tthis.$wrapper = null;\n\n\t\t\t// Switch off events\n\t\t\tthis.unsubscribeEvents();\n\n\t\t\t// Reset this.initialized flag\n\t\t\tthis.initialized = false;\n\t\t},\n\n\t\tunsubscribeEvents : function () {\n\n\t\t\tthis.$element.off('click');\n\t\t\tthis.$element.off('nodeChecked');\n\t\t\tthis.$element.off('nodeCollapsed');\n\t\t\tthis.$element.off('nodeDisabled');\n\t\t\tthis.$element.off('nodeEnabled');\n\t\t\tthis.$element.off('nodeExpanded');\n\t\t\tthis.$element.off('nodeSelected');\n\t\t\tthis.$element.off('nodeUnchecked');\n\t\t\tthis.$element.off('nodeUnselected');\n\t\t\tthis.$element.off('searchComplete');\n\t\t\tthis.$element.off('searchCleared');\n\t\t},\n\n\t\tsubscribeEvents : function () {\n\n\t\t\tthis.unsubscribeEvents();\n\n\t\t\tthis.$element.on('click', langx.proxy(this.clickHandler, this));\n\n\t\t\tif (typeof (this.options.onNodeChecked) === 'function') {\n\t\t\t\tthis.$element.on('nodeChecked', this.options.onNodeChecked);\n\t\t\t}\n\n\t\t\tif (typeof (this.options.onNodeCollapsed) === 'function') {\n\t\t\t\tthis.$element.on('nodeCollapsed', this.options.onNodeCollapsed);\n\t\t\t}\n\n\t\t\tif (typeof (this.options.onNodeDisabled) === 'function') {\n\t\t\t\tthis.$element.on('nodeDisabled', this.options.onNodeDisabled);\n\t\t\t}\n\n\t\t\tif (typeof (this.options.onNodeEnabled) === 'function') {\n\t\t\t\tthis.$element.on('nodeEnabled', this.options.onNodeEnabled);\n\t\t\t}\n\n\t\t\tif (typeof (this.options.onNodeExpanded) === 'function') {\n\t\t\t\tthis.$element.on('nodeExpanded', this.options.onNodeExpanded);\n\t\t\t}\n\n\t\t\tif (typeof (this.options.onNodeSelected) === 'function') {\n\t\t\t\tthis.$element.on('nodeSelected', this.options.onNodeSelected);\n\t\t\t}\n\n\t\t\tif (typeof (this.options.onNodeUnchecked) === 'function') {\n\t\t\t\tthis.$element.on('nodeUnchecked', this.options.onNodeUnchecked);\n\t\t\t}\n\n\t\t\tif (typeof (this.options.onNodeUnselected) === 'function') {\n\t\t\t\tthis.$element.on('nodeUnselected', this.options.onNodeUnselected);\n\t\t\t}\n\n\t\t\tif (typeof (this.options.onSearchComplete) === 'function') {\n\t\t\t\tthis.$element.on('searchComplete', this.options.onSearchComplete);\n\t\t\t}\n\n\t\t\tif (typeof (this.options.onSearchCleared) === 'function') {\n\t\t\t\tthis.$element.on('searchCleared', this.options.onSearchCleared);\n\t\t\t}\n\t\t},\n\n\t\t/*\n\t\t\tRecurse the tree structure and ensure all nodes have\n\t\t\tvalid initial states.  User defined states will be preserved.\n\t\t\tFor performance we also take this opportunity to\n\t\t\tindex nodes in a flattened structure\n\t\t*/\n\t\tsetInitialStates : function (node, level) {\n\n\t\t\tif (!node.nodes) return;\n\t\t\tlevel += 1;\n\n\t\t\tvar parent = node;\n\t\t\tvar _this = this;\n\t\t\tlangx.each(node.nodes, function checkStates(index, node) {\n\n\t\t\t\t// nodeId : unique, incremental identifier\n\t\t\t\tnode.nodeId = _this.nodes.length;\n\n\t\t\t\t// parentId : transversing up the tree\n\t\t\t\tnode.parentId = parent.nodeId;\n\n\t\t\t\t// if not provided set selectable default value\n\t\t\t\tif (!node.hasOwnProperty('selectable')) {\n\t\t\t\t\tnode.selectable = true;\n\t\t\t\t}\n\n\t\t\t\t// where provided we should preserve states\n\t\t\t\tnode.state = node.state || {};\n\n\t\t\t\t// set checked state; unless set always false\n\t\t\t\tif (!node.state.hasOwnProperty('checked')) {\n\t\t\t\t\tnode.state.checked = false;\n\t\t\t\t}\n\n\t\t\t\t// set enabled state; unless set always false\n\t\t\t\tif (!node.state.hasOwnProperty('disabled')) {\n\t\t\t\t\tnode.state.disabled = false;\n\t\t\t\t}\n\n\t\t\t\t// set expanded state; if not provided based on levels\n\t\t\t\tif (!node.state.hasOwnProperty('expanded')) {\n\t\t\t\t\tif (!node.state.disabled &&\n\t\t\t\t\t\t\t(level < _this.options.levels) &&\n\t\t\t\t\t\t\t(node.nodes && node.nodes.length > 0)) {\n\t\t\t\t\t\tnode.state.expanded = true;\n\t\t\t\t\t}\n\t\t\t\t\telse {\n\t\t\t\t\t\tnode.state.expanded = false;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\t// set selected state; unless set always false\n\t\t\t\tif (!node.state.hasOwnProperty('selected')) {\n\t\t\t\t\tnode.state.selected = false;\n\t\t\t\t}\n\n\t\t\t\t// index nodes in a flattened structure for use later\n\t\t\t\t_this.nodes.push(node);\n\n\t\t\t\t// recurse child nodes and transverse the tree\n\t\t\t\tif (node.nodes) {\n\t\t\t\t\t_this.setInitialStates(node, level);\n\t\t\t\t}\n\t\t\t});\n\t\t},\n\n\t\tclickHandler : function (event) {\n\n\t\t\tif (!this.options.enableLinks) event.preventDefault();\n\n\t\t\tvar target = $(event.target);\n\t\t\tvar node = this.findNode(target);\n\t\t\tif (!node || node.state.disabled) return;\n\t\t\t\n\t\t\tvar classList = target.attr('class') ? target.attr('class').split(' ') : [];\n\t\t\tif ((classList.indexOf('expand-icon') !== -1)) {\n\n\t\t\t\tthis.toggleExpandedState(node, _default.options);\n\t\t\t\tthis.render();\n\t\t\t}\n\t\t\telse if ((classList.indexOf('check-icon') !== -1)) {\n\t\t\t\t\n\t\t\t\tthis.toggleCheckedState(node, _default.options);\n\t\t\t\tthis.render();\n\t\t\t}\n\t\t\telse {\n\t\t\t\t\n\t\t\t\tif (node.selectable) {\n\t\t\t\t\tthis.toggleSelectedState(node, _default.options);\n\t\t\t\t} else {\n\t\t\t\t\tthis.toggleExpandedState(node, _default.options);\n\t\t\t\t}\n\n\t\t\t\tthis.render();\n\t\t\t}\n\t\t},\n\n\t\t// Looks up the DOM for the closest parent list item to retrieve the\n\t\t// data attribute nodeid, which is used to lookup the node in the flattened structure.\n\t\tfindNode : function (target) {\n\n\t\t\tvar nodeId = target.closest('li.list-group-item').attr('data-nodeid');\n\t\t\tvar node = this.nodes[nodeId];\n\n\t\t\tif (!node) {\n\t\t\t\tconsole.log('Error: node does not exist');\n\t\t\t}\n\t\t\treturn node;\n\t\t},\n\n\t\ttoggleExpandedState : function (node, options) {\n\t\t\tif (!node) return;\n\t\t\tthis.setExpandedState(node, !node.state.expanded, options);\n\t\t},\n\n\t\tsetExpandedState : function (node, state, options) {\n\n\t\t\tif (state === node.state.expanded) return;\n\n\t\t\tif (state && node.nodes) {\n\n\t\t\t\t// Expand a node\n\t\t\t\tnode.state.expanded = true;\n\t\t\t\tif (!options.silent) {\n\t\t\t\t\tthis.$element.trigger('nodeExpanded', langx.extend(true, {}, node));\n\t\t\t\t}\n\t\t\t}\n\t\t\telse if (!state) {\n\n\t\t\t\t// Collapse a node\n\t\t\t\tnode.state.expanded = false;\n\t\t\t\tif (!options.silent) {\n\t\t\t\t\tthis.$element.trigger('nodeCollapsed', langx.extend(true, {}, node));\n\t\t\t\t}\n\n\t\t\t\t// Collapse child nodes\n\t\t\t\tif (node.nodes && !options.ignoreChildren) {\n\t\t\t\t\tlangx.each(node.nodes, langx.proxy(function (index, node) {\n\t\t\t\t\t\tthis.setExpandedState(node, false, options);\n\t\t\t\t\t}, this));\n\t\t\t\t}\n\t\t\t}\n\t\t},\n\n\t\ttoggleSelectedState : function (node, options) {\n\t\t\tif (!node) return;\n\t\t\tthis.setSelectedState(node, !node.state.selected, options);\n\t\t},\n\n\t\tsetSelectedState : function (node, state, options) {\n\n\t\t\tif (state === node.state.selected) return;\n\n\t\t\tif (state) {\n\n\t\t\t\t// If multiSelect false, unselect previously selected\n\t\t\t\tif (!this.options.multiSelect) {\n\t\t\t\t\tlangx.each(this.findNodes('true', 'g', 'state.selected'), langx.proxy(function (index, node) {\n\t\t\t\t\t\tthis.setSelectedState(node, false, options);\n\t\t\t\t\t}, this));\n\t\t\t\t}\n\n\t\t\t\t// Continue selecting node\n\t\t\t\tnode.state.selected = true;\n\t\t\t\tif (!options.silent) {\n\t\t\t\t\tthis.$element.trigger('nodeSelected', langx.extend(true, {}, node));\n\t\t\t\t}\n\t\t\t}\n\t\t\telse {\n\n\t\t\t\t// Unselect node\n\t\t\t\tnode.state.selected = false;\n\t\t\t\tif (!options.silent) {\n\t\t\t\t\tthis.$element.trigger('nodeUnselected', langx.extend(true, {}, node));\n\t\t\t\t}\n\t\t\t}\n\t\t},\n\n\t\ttoggleCheckedState : function (node, options) {\n\t\t\tif (!node) return;\n\t\t\tthis.setCheckedState(node, !node.state.checked, options);\n\t\t},\n\n\t\tsetCheckedState : function (node, state, options) {\n\n\t\t\tif (state === node.state.checked) return;\n\n\t\t\tif (state) {\n\n\t\t\t\t// Check node\n\t\t\t\tnode.state.checked = true;\n\n\t\t\t\tif (!options.silent) {\n\t\t\t\t\tthis.$element.trigger('nodeChecked', langx.extend(true, {}, node));\n\t\t\t\t}\n\t\t\t}\n\t\t\telse {\n\n\t\t\t\t// Uncheck node\n\t\t\t\tnode.state.checked = false;\n\t\t\t\tif (!options.silent) {\n\t\t\t\t\tthis.$element.trigger('nodeUnchecked', langx.extend(true, {}, node));\n\t\t\t\t}\n\t\t\t}\n\t\t},\n\n\t\tsetDisabledState : function (node, state, options) {\n\n\t\t\tif (state === node.state.disabled) return;\n\n\t\t\tif (state) {\n\n\t\t\t\t// Disable node\n\t\t\t\tnode.state.disabled = true;\n\n\t\t\t\t// Disable all other states\n\t\t\t\tthis.setExpandedState(node, false, options);\n\t\t\t\tthis.setSelectedState(node, false, options);\n\t\t\t\tthis.setCheckedState(node, false, options);\n\n\t\t\t\tif (!options.silent) {\n\t\t\t\t\tthis.$element.trigger('nodeDisabled', langx.extend(true, {}, node));\n\t\t\t\t}\n\t\t\t}\n\t\t\telse {\n\n\t\t\t\t// Enabled node\n\t\t\t\tnode.state.disabled = false;\n\t\t\t\tif (!options.silent) {\n\t\t\t\t\tthis.$element.trigger('nodeEnabled', langx.extend(true, {}, node));\n\t\t\t\t}\n\t\t\t}\n\t\t},\n\n\t\trender : function () {\n\n\t\t\tif (!this.initialized) {\n\n\t\t\t\t// Setup first time only components\n\t\t\t\tthis.$element.addClass(pluginName);\n\t\t\t\tthis.$wrapper = $(this.template.list);\n\n\t\t\t\tthis.injectStyle();\n\n\t\t\t\tthis.initialized = true;\n\t\t\t}\n\n\t\t\tthis.$element.empty().append(this.$wrapper.empty());\n\n\t\t\t// Build tree\n\t\t\tthis.buildTree(this.tree, 0);\n\t\t},\n\n\t\t// Starting from the root node, and recursing down the\n\t\t// structure we build the tree one node at a time\n\t\tbuildTree : function (nodes, level) {\n\n\t\t\tif (!nodes) return;\n\t\t\tlevel += 1;\n\n\t\t\tvar _this = this;\n\t\t\tlangx.each(nodes, function addNodes(id, node) {\n\n\t\t\t\tvar treeItem = $(_this.template.item)\n\t\t\t\t\t.addClass('node-' + _this.elementId)\n\t\t\t\t\t.addClass(node.state.checked ? 'node-checked' : '')\n\t\t\t\t\t.addClass(node.state.disabled ? 'node-disabled': '')\n\t\t\t\t\t.addClass(node.state.selected ? 'node-selected' : '')\n\t\t\t\t\t.addClass(node.searchResult ? 'search-result' : '') \n\t\t\t\t\t.attr('data-nodeid', node.nodeId)\n\t\t\t\t\t.attr('style', _this.buildStyleOverride(node));\n\n\t\t\t\t// Add indent/spacer to mimic tree structure\n\t\t\t\tfor (var i = 0; i < (level - 1); i++) {\n\t\t\t\t\ttreeItem.append(_this.template.indent);\n\t\t\t\t}\n\n\t\t\t\t// Add expand, collapse or empty spacer icons\n\t\t\t\tvar classList = [];\n\t\t\t\tif (node.nodes) {\n\t\t\t\t\tclassList.push('expand-icon');\n\t\t\t\t\tif (node.state.expanded) {\n\t\t\t\t\t\tclassList.push(_this.options.collapseIcon);\n\t\t\t\t\t}\n\t\t\t\t\telse {\n\t\t\t\t\t\tclassList.push(_this.options.expandIcon);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\tclassList.push(_this.options.emptyIcon);\n\t\t\t\t}\n\n\t\t\t\ttreeItem\n\t\t\t\t\t.append($(_this.template.icon)\n\t\t\t\t\t\t.addClass(classList.join(' '))\n\t\t\t\t\t);\n\n\n\t\t\t\t// Add node icon\n\t\t\t\tif (_this.options.showIcon) {\n\t\t\t\t\t\n\t\t\t\t\tvar classList = ['node-icon'];\n\n\t\t\t\t\tclassList.push(node.icon || _this.options.nodeIcon);\n\t\t\t\t\tif (node.state.selected) {\n\t\t\t\t\t\tclassList.pop();\n\t\t\t\t\t\tclassList.push(node.selectedIcon || _this.options.selectedIcon || \n\t\t\t\t\t\t\t\t\t\tnode.icon || _this.options.nodeIcon);\n\t\t\t\t\t}\n\n\t\t\t\t\ttreeItem\n\t\t\t\t\t\t.append($(_this.template.icon)\n\t\t\t\t\t\t\t.addClass(classList.join(' '))\n\t\t\t\t\t\t);\n\t\t\t\t}\n\n\t\t\t\t// Add check / unchecked icon\n\t\t\t\tif (_this.options.showCheckbox) {\n\n\t\t\t\t\tvar classList = ['check-icon'];\n\t\t\t\t\tif (node.state.checked) {\n\t\t\t\t\t\tclassList.push(_this.options.checkedIcon); \n\t\t\t\t\t}\n\t\t\t\t\telse {\n\t\t\t\t\t\tclassList.push(_this.options.uncheckedIcon);\n\t\t\t\t\t}\n\n\t\t\t\t\ttreeItem\n\t\t\t\t\t\t.append($(_this.template.icon)\n\t\t\t\t\t\t\t.addClass(classList.join(' '))\n\t\t\t\t\t\t);\n\t\t\t\t}\n\n\t\t\t\t// Add text\n\t\t\t\tif (_this.options.enableLinks) {\n\t\t\t\t\t// Add hyperlink\n\t\t\t\t\ttreeItem\n\t\t\t\t\t\t.append($(_this.template.link)\n\t\t\t\t\t\t\t.attr('href', node.href)\n\t\t\t\t\t\t\t.append(node.text)\n\t\t\t\t\t\t);\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\t// otherwise just text\n\t\t\t\t\ttreeItem\n\t\t\t\t\t\t.append(node.text);\n\t\t\t\t}\n\n\t\t\t\t// Add tags as badges\n\t\t\t\tif (_this.options.showTags && node.tags) {\n\t\t\t\t\tlangx.each(node.tags, function addTag(id, tag) {\n\t\t\t\t\t\ttreeItem\n\t\t\t\t\t\t\t.append($(_this.template.badge)\n\t\t\t\t\t\t\t\t.append(tag)\n\t\t\t\t\t\t\t);\n\t\t\t\t\t});\n\t\t\t\t}\n\n\t\t\t\t// Add item to the tree\n\t\t\t\t_this.$wrapper.append(treeItem);\n\n\t\t\t\t// Recursively add child ndoes\n\t\t\t\tif (node.nodes && node.state.expanded && !node.state.disabled) {\n\t\t\t\t\treturn _this.buildTree(node.nodes, level);\n\t\t\t\t}\n\t\t\t});\n\t\t},\n\n\t\t// Define any node level style override for\n\t\t// 1. selectedNode\n\t\t// 2. node|data assigned color overrides\n\t\tbuildStyleOverride : function (node) {\n\n\t\t\tif (node.state.disabled) return '';\n\n\t\t\tvar color = node.color;\n\t\t\tvar backColor = node.backColor;\n\n\t\t\tif (this.options.highlightSelected && node.state.selected) {\n\t\t\t\tif (this.options.selectedColor) {\n\t\t\t\t\tcolor = this.options.selectedColor;\n\t\t\t\t}\n\t\t\t\tif (this.options.selectedBackColor) {\n\t\t\t\t\tbackColor = this.options.selectedBackColor;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (this.options.highlightSearchResults && node.searchResult && !node.state.disabled) {\n\t\t\t\tif (this.options.searchResultColor) {\n\t\t\t\t\tcolor = this.options.searchResultColor;\n\t\t\t\t}\n\t\t\t\tif (this.options.searchResultBackColor) {\n\t\t\t\t\tbackColor = this.options.searchResultBackColor;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn 'color:' + color +\n\t\t\t\t';background-color:' + backColor + ';';\n\t\t},\n\n\t\t// Add inline style into head\n\t\tinjectStyle : function () {\n\n\t\t\tif (this.options.injectStyle && !document.getElementById(this.styleId)) {\n\t\t\t\t$('<style type=\"text/css\" id=\"' + this.styleId + '\"> ' + this.buildStyle() + ' </style>').appendTo('head');\n\t\t\t}\n\t\t},\n\n\t\t// Construct trees style based on user options\n\t\tbuildStyle : function () {\n\n\t\t\tvar style = '.node-' + this.elementId + '{';\n\n\t\t\tif (this.options.color) {\n\t\t\t\tstyle += 'color:' + this.options.color + ';';\n\t\t\t}\n\n\t\t\tif (this.options.backColor) {\n\t\t\t\tstyle += 'background-color:' + this.options.backColor + ';';\n\t\t\t}\n\n\t\t\tif (!this.options.showBorder) {\n\t\t\t\tstyle += 'border:none;';\n\t\t\t}\n\t\t\telse if (this.options.borderColor) {\n\t\t\t\tstyle += 'border:1px solid ' + this.options.borderColor + ';';\n\t\t\t}\n\t\t\tstyle += '}';\n\n\t\t\tif (this.options.onhoverColor) {\n\t\t\t\tstyle += '.node-' + this.elementId + ':not(.node-disabled):hover{' +\n\t\t\t\t\t'background-color:' + this.options.onhoverColor + ';' +\n\t\t\t\t'}';\n\t\t\t}\n\n\t\t\treturn this.css + style;\n\t\t},\n\n\t\t/**\n\t\t\tReturns a single node object that matches the given node id.\n\t\t\t@param {Number} nodeId - A node's unique identifier\n\t\t\t@return {Object} node - Matching node\n\t\t*/\n\t\tgetNode : function (nodeId) {\n\t\t\treturn this.nodes[nodeId];\n\t\t},\n\n\t\t/**\n\t\t\tReturns the parent node of a given node, if valid otherwise returns undefined.\n\t\t\t@param {Object|Number} identifier - A valid node or node id\n\t\t\t@returns {Object} node - The parent node\n\t\t*/\n\t\tgetParent : function (identifier) {\n\t\t\tvar node = this.identifyNode(identifier);\n\t\t\treturn this.nodes[node.parentId];\n\t\t},\n\n\t\t/**\n\t\t\tReturns an array of sibling nodes for a given node, if valid otherwise returns undefined.\n\t\t\t@param {Object|Number} identifier - A valid node or node id\n\t\t\t@returns {Array} nodes - Sibling nodes\n\t\t*/\n\t\tgetSiblings : function (identifier) {\n\t\t\tvar node = this.identifyNode(identifier);\n\t\t\tvar parent = this.getParent(node);\n\t\t\tvar nodes = parent ? parent.nodes : this.tree;\n\t\t\treturn nodes.filter(function (obj) {\n\t\t\t\t\treturn obj.nodeId !== node.nodeId;\n\t\t\t\t});\n\t\t},\n\n\t\t/**\n\t\t\tReturns an array of selected nodes.\n\t\t\t@returns {Array} nodes - Selected nodes\n\t\t*/\n\t\tgetSelected : function () {\n\t\t\treturn this.findNodes('true', 'g', 'state.selected');\n\t\t},\n\n\t\t/**\n\t\t\tReturns an array of unselected nodes.\n\t\t\t@returns {Array} nodes - Unselected nodes\n\t\t*/\n\t\tgetUnselected : function () {\n\t\t\treturn this.findNodes('false', 'g', 'state.selected');\n\t\t},\n\n\t\t/**\n\t\t\tReturns an array of expanded nodes.\n\t\t\t@returns {Array} nodes - Expanded nodes\n\t\t*/\n\t\tgetExpanded : function () {\n\t\t\treturn this.findNodes('true', 'g', 'state.expanded');\n\t\t},\n\n\t\t/**\n\t\t\tReturns an array of collapsed nodes.\n\t\t\t@returns {Array} nodes - Collapsed nodes\n\t\t*/\n\t\tgetCollapsed : function () {\n\t\t\treturn this.findNodes('false', 'g', 'state.expanded');\n\t\t},\n\n\t\t/**\n\t\t\tReturns an array of checked nodes.\n\t\t\t@returns {Array} nodes - Checked nodes\n\t\t*/\n\t\tgetChecked : function () {\n\t\t\treturn this.findNodes('true', 'g', 'state.checked');\n\t\t},\n\n\t\t/**\n\t\t\tReturns an array of unchecked nodes.\n\t\t\t@returns {Array} nodes - Unchecked nodes\n\t\t*/\n\t\tgetUnchecked : function () {\n\t\t\treturn this.findNodes('false', 'g', 'state.checked');\n\t\t},\n\n\t\t/**\n\t\t\tReturns an array of disabled nodes.\n\t\t\t@returns {Array} nodes - Disabled nodes\n\t\t*/\n\t\tgetDisabled : function () {\n\t\t\treturn this.findNodes('true', 'g', 'state.disabled');\n\t\t},\n\n\t\t/**\n\t\t\tReturns an array of enabled nodes.\n\t\t\t@returns {Array} nodes - Enabled nodes\n\t\t*/\n\t\tgetEnabled : function () {\n\t\t\treturn this.findNodes('false', 'g', 'state.disabled');\n\t\t},\n\n\n\t\t/**\n\t\t\tSet a node state to selected\n\t\t\t@param {Object|Number} identifiers - A valid node, node id or array of node identifiers\n\t\t\t@param {optional Object} options\n\t\t*/\n\t\tselectNode : function (identifiers, options) {\n\t\t\tthis.forEachIdentifier(identifiers, options, langx.proxy(function (node, options) {\n\t\t\t\tthis.setSelectedState(node, true, options);\n\t\t\t}, this));\n\n\t\t\tthis.render();\n\t\t},\n\n\t\t/**\n\t\t\tSet a node state to unselected\n\t\t\t@param {Object|Number} identifiers - A valid node, node id or array of node identifiers\n\t\t\t@param {optional Object} options\n\t\t*/\n\t\tunselectNode : function (identifiers, options) {\n\t\t\tthis.forEachIdentifier(identifiers, options, langx.proxy(function (node, options) {\n\t\t\t\tthis.setSelectedState(node, false, options);\n\t\t\t}, this));\n\n\t\t\tthis.render();\n\t\t},\n\n\t\t/**\n\t\t\tToggles a node selected state; selecting if unselected, unselecting if selected.\n\t\t\t@param {Object|Number} identifiers - A valid node, node id or array of node identifiers\n\t\t\t@param {optional Object} options\n\t\t*/\n\t\ttoggleNodeSelected : function (identifiers, options) {\n\t\t\tthis.forEachIdentifier(identifiers, options, langx.proxy(function (node, options) {\n\t\t\t\tthis.toggleSelectedState(node, options);\n\t\t\t}, this));\n\n\t\t\tthis.render();\n\t\t},\n\n\n\t\t/**\n\t\t\tCollapse all tree nodes\n\t\t\t@param {optional Object} options\n\t\t*/\n\t\tcollapseAll : function (options) {\n\t\t\tvar identifiers = this.findNodes('true', 'g', 'state.expanded');\n\t\t\tthis.forEachIdentifier(identifiers, options, langx.proxy(function (node, options) {\n\t\t\t\tthis.setExpandedState(node, false, options);\n\t\t\t}, this));\n\n\t\t\tthis.render();\n\t\t},\n\n\t\t/**\n\t\t\tCollapse a given tree node\n\t\t\t@param {Object|Number} identifiers - A valid node, node id or array of node identifiers\n\t\t\t@param {optional Object} options\n\t\t*/\n\t\tcollapseNode : function (identifiers, options) {\n\t\t\tthis.forEachIdentifier(identifiers, options, langx.proxy(function (node, options) {\n\t\t\t\tthis.setExpandedState(node, false, options);\n\t\t\t}, this));\n\n\t\t\tthis.render();\n\t\t},\n\n\t\t/**\n\t\t\tExpand all tree nodes\n\t\t\t@param {optional Object} options\n\t\t*/\n\t\texpandAll : function (options) {\n\t\t\toptions = langx.extend({}, _default.options, options);\n\n\t\t\tif (options && options.levels) {\n\t\t\t\tthis.expandLevels(this.tree, options.levels, options);\n\t\t\t}\n\t\t\telse {\n\t\t\t\tvar identifiers = this.findNodes('false', 'g', 'state.expanded');\n\t\t\t\tthis.forEachIdentifier(identifiers, options, langx.proxy(function (node, options) {\n\t\t\t\t\tthis.setExpandedState(node, true, options);\n\t\t\t\t}, this));\n\t\t\t}\n\n\t\t\tthis.render();\n\t\t},\n\n\t\t/**\n\t\t\tExpand a given tree node\n\t\t\t@param {Object|Number} identifiers - A valid node, node id or array of node identifiers\n\t\t\t@param {optional Object} options\n\t\t*/\n\t\texpandNode : function (identifiers, options) {\n\t\t\tthis.forEachIdentifier(identifiers, options, langx.proxy(function (node, options) {\n\t\t\t\tthis.setExpandedState(node, true, options);\n\t\t\t\tif (node.nodes && (options && options.levels)) {\n\t\t\t\t\tthis.expandLevels(node.nodes, options.levels-1, options);\n\t\t\t\t}\n\t\t\t}, this));\n\n\t\t\tthis.render();\n\t\t},\n\n\t\texpandLevels : function (nodes, level, options) {\n\t\t\toptions = langx.extend({}, _default.options, options);\n\n\t\t\tlangx.each(nodes, langx.proxy(function (index, node) {\n\t\t\t\tthis.setExpandedState(node, (level > 0) ? true : false, options);\n\t\t\t\tif (node.nodes) {\n\t\t\t\t\tthis.expandLevels(node.nodes, level-1, options);\n\t\t\t\t}\n\t\t\t}, this));\n\t\t},\n\n\t\t/**\n\t\t\tReveals a given tree node, expanding the tree from node to root.\n\t\t\t@param {Object|Number|Array} identifiers - A valid node, node id or array of node identifiers\n\t\t\t@param {optional Object} options\n\t\t*/\n\t\trevealNode : function (identifiers, options) {\n\t\t\tthis.forEachIdentifier(identifiers, options, langx.proxy(function (node, options) {\n\t\t\t\tvar parentNode = this.getParent(node);\n\t\t\t\twhile (parentNode) {\n\t\t\t\t\tthis.setExpandedState(parentNode, true, options);\n\t\t\t\t\tparentNode = this.getParent(parentNode);\n\t\t\t\t}\n\t\t\t}, this));\n\n\t\t\tthis.render();\n\t\t},\n\n\t\t/**\n\t\t\tToggles a nodes expanded state; collapsing if expanded, expanding if collapsed.\n\t\t\t@param {Object|Number} identifiers - A valid node, node id or array of node identifiers\n\t\t\t@param {optional Object} options\n\t\t*/\n\t\ttoggleNodeExpanded : function (identifiers, options) {\n\t\t\tthis.forEachIdentifier(identifiers, options, langx.proxy(function (node, options) {\n\t\t\t\tthis.toggleExpandedState(node, options);\n\t\t\t}, this));\n\t\t\t\n\t\t\tthis.render();\n\t\t},\n\n\n\t\t/**\n\t\t\tCheck all tree nodes\n\t\t\t@param {optional Object} options\n\t\t*/\n\t\tcheckAll : function (options) {\n\t\t\tvar identifiers = this.findNodes('false', 'g', 'state.checked');\n\t\t\tthis.forEachIdentifier(identifiers, options, langx.proxy(function (node, options) {\n\t\t\t\tthis.setCheckedState(node, true, options);\n\t\t\t}, this));\n\n\t\t\tthis.render();\n\t\t},\n\n\t\t/**\n\t\t\tCheck a given tree node\n\t\t\t@param {Object|Number} identifiers - A valid node, node id or array of node identifiers\n\t\t\t@param {optional Object} options\n\t\t*/\n\t\tcheckNode : function (identifiers, options) {\n\t\t\tthis.forEachIdentifier(identifiers, options, langx.proxy(function (node, options) {\n\t\t\t\tthis.setCheckedState(node, true, options);\n\t\t\t}, this));\n\n\t\t\tthis.render();\n\t\t},\n\n\t\t/**\n\t\t\tUncheck all tree nodes\n\t\t\t@param {optional Object} options\n\t\t*/\n\t\tuncheckAll : function (options) {\n\t\t\tvar identifiers = this.findNodes('true', 'g', 'state.checked');\n\t\t\tthis.forEachIdentifier(identifiers, options, langx.proxy(function (node, options) {\n\t\t\t\tthis.setCheckedState(node, false, options);\n\t\t\t}, this));\n\n\t\t\tthis.render();\n\t\t},\n\n\t\t/**\n\t\t\tUncheck a given tree node\n\t\t\t@param {Object|Number} identifiers - A valid node, node id or array of node identifiers\n\t\t\t@param {optional Object} options\n\t\t*/\n\t\tuncheckNode : function (identifiers, options) {\n\t\t\tthis.forEachIdentifier(identifiers, options, langx.proxy(function (node, options) {\n\t\t\t\tthis.setCheckedState(node, false, options);\n\t\t\t}, this));\n\n\t\t\tthis.render();\n\t\t},\n\n\t\t/**\n\t\t\tToggles a nodes checked state; checking if unchecked, unchecking if checked.\n\t\t\t@param {Object|Number} identifiers - A valid node, node id or array of node identifiers\n\t\t\t@param {optional Object} options\n\t\t*/\n\t\ttoggleNodeChecked : function (identifiers, options) {\n\t\t\tthis.forEachIdentifier(identifiers, options, langx.proxy(function (node, options) {\n\t\t\t\tthis.toggleCheckedState(node, options);\n\t\t\t}, this));\n\n\t\t\tthis.render();\n\t\t},\n\n\n\t\t/**\n\t\t\tDisable all tree nodes\n\t\t\t@param {optional Object} options\n\t\t*/\n\t\tdisableAll : function (options) {\n\t\t\tvar identifiers = this.findNodes('false', 'g', 'state.disabled');\n\t\t\tthis.forEachIdentifier(identifiers, options, langx.proxy(function (node, options) {\n\t\t\t\tthis.setDisabledState(node, true, options);\n\t\t\t}, this));\n\n\t\t\tthis.render();\n\t\t},\n\n\t\t/**\n\t\t\tDisable a given tree node\n\t\t\t@param {Object|Number} identifiers - A valid node, node id or array of node identifiers\n\t\t\t@param {optional Object} options\n\t\t*/\n\t\tdisableNode : function (identifiers, options) {\n\t\t\tthis.forEachIdentifier(identifiers, options, langx.proxy(function (node, options) {\n\t\t\t\tthis.setDisabledState(node, true, options);\n\t\t\t}, this));\n\n\t\t\tthis.render();\n\t\t},\n\n\t\t/**\n\t\t\tEnable all tree nodes\n\t\t\t@param {optional Object} options\n\t\t*/\n\t\tenableAll : function (options) {\n\t\t\tvar identifiers = this.findNodes('true', 'g', 'state.disabled');\n\t\t\tthis.forEachIdentifier(identifiers, options, langx.proxy(function (node, options) {\n\t\t\t\tthis.setDisabledState(node, false, options);\n\t\t\t}, this));\n\n\t\t\tthis.render();\n\t\t},\n\n\t\t/**\n\t\t\tEnable a given tree node\n\t\t\t@param {Object|Number} identifiers - A valid node, node id or array of node identifiers\n\t\t\t@param {optional Object} options\n\t\t*/\n\t\tenableNode : function (identifiers, options) {\n\t\t\tthis.forEachIdentifier(identifiers, options, langx.proxy(function (node, options) {\n\t\t\t\tthis.setDisabledState(node, false, options);\n\t\t\t}, this));\n\n\t\t\tthis.render();\n\t\t},\n\n\t\t/**\n\t\t\tToggles a nodes disabled state; disabling is enabled, enabling if disabled.\n\t\t\t@param {Object|Number} identifiers - A valid node, node id or array of node identifiers\n\t\t\t@param {optional Object} options\n\t\t*/\n\t\ttoggleNodeDisabled : function (identifiers, options) {\n\t\t\tthis.forEachIdentifier(identifiers, options, langx.proxy(function (node, options) {\n\t\t\t\tthis.setDisabledState(node, !node.state.disabled, options);\n\t\t\t}, this));\n\n\t\t\tthis.render();\n\t\t},\n\n\n\t\t/**\n\t\t\tCommon code for processing multiple identifiers\n\t\t*/\n\t\tforEachIdentifier : function (identifiers, options, callback) {\n\n\t\t\toptions = langx.extend({}, _default.options, options);\n\n\t\t\tif (!(identifiers instanceof Array)) {\n\t\t\t\tidentifiers = [identifiers];\n\t\t\t}\n\n\t\t\tlangx.each(identifiers, langx.proxy(function (index, identifier) {\n\t\t\t\tcallback(this.identifyNode(identifier), options);\n\t\t\t}, this));\t\n\t\t},\n\n\t\t/*\n\t\t\tIdentifies a node from either a node id or object\n\t\t*/\n\t\tidentifyNode : function (identifier) {\n\t\t\treturn ((typeof identifier) === 'number') ?\n\t\t\t\t\t\t\tthis.nodes[identifier] :\n\t\t\t\t\t\t\tidentifier;\n\t\t},\n\n\t\t/**\n\t\t\tSearches the tree for nodes (text) that match given criteria\n\t\t\t@param {String} pattern - A given string to match against\n\t\t\t@param {optional Object} options - Search criteria options\n\t\t\t@return {Array} nodes - Matching nodes\n\t\t*/\n\t\tsearch : function (pattern, options) {\n\t\t\toptions = langx.extend({}, _default.searchOptions, options);\n\n\t\t\tthis.clearSearch({ render: false });\n\n\t\t\tvar results = [];\n\t\t\tif (pattern && pattern.length > 0) {\n\n\t\t\t\tif (options.exactMatch) {\n\t\t\t\t\tpattern = '^' + pattern + '$';\n\t\t\t\t}\n\n\t\t\t\tvar modifier = 'g';\n\t\t\t\tif (options.ignoreCase) {\n\t\t\t\t\tmodifier += 'i';\n\t\t\t\t}\n\n\t\t\t\tresults = this.findNodes(pattern, modifier);\n\n\t\t\t\t// Add searchResult property to all matching nodes\n\t\t\t\t// This will be used to apply custom styles\n\t\t\t\t// and when identifying result to be cleared\n\t\t\t\tlangx.each(results, function (index, node) {\n\t\t\t\t\tnode.searchResult = true;\n\t\t\t\t})\n\t\t\t}\n\n\t\t\t// If revealResults, then render is triggered from revealNode\n\t\t\t// otherwise we just call render.\n\t\t\tif (options.revealResults) {\n\t\t\t\tthis.revealNode(results);\n\t\t\t}\n\t\t\telse {\n\t\t\t\tthis.render();\n\t\t\t}\n\n\t\t\tthis.$element.trigger('searchComplete', langx.extend(true, {}, results));\n\n\t\t\treturn results;\n\t\t},\n\n\t\t/**\n\t\t\tClears previous search results\n\t\t*/\n\t\tclearSearch : function (options) {\n\n\t\t\toptions = langx.extend({}, { render: true }, options);\n\n\t\t\tvar results = langx.each(this.findNodes('true', 'g', 'searchResult'), function (index, node) {\n\t\t\t\tnode.searchResult = false;\n\t\t\t});\n\n\t\t\tif (options.render) {\n\t\t\t\tthis.render();\t\n\t\t\t}\n\t\t\t\n\t\t\tthis.$element.trigger('searchCleared', langx.extend(true, {}, results));\n\t\t},\n\n\t\t/**\n\t\t\tFind nodes that match a given criteria\n\t\t\t@param {String} pattern - A given string to match against\n\t\t\t@param {optional String} modifier - Valid RegEx modifiers\n\t\t\t@param {optional String} attribute - Attribute to compare pattern against\n\t\t\t@return {Array} nodes - Nodes that match your criteria\n\t\t*/\n\t\tfindNodes : function (pattern, modifier, attribute) {\n\n\t\t\tmodifier = modifier || 'g';\n\t\t\tattribute = attribute || 'text';\n\n\t\t\tvar _this = this;\n\t\t\treturn langx.grep(this.nodes, function (node) {\n\t\t\t\tvar val = _this.getNodeValue(node, attribute);\n\t\t\t\tif (typeof val === 'string') {\n\t\t\t\t\treturn val.match(new RegExp(pattern, modifier));\n\t\t\t\t}\n\t\t\t});\n\t\t},\n\n\t\t/**\n\t\t\tRecursive find for retrieving nested attributes values\n\t\t\tAll values are return as strings, unless invalid\n\t\t\t@param {Object} obj - Typically a node, could be any object\n\t\t\t@param {String} attr - Identifies an object property using dot notation\n\t\t\t@return {String} value - Matching attributes string representation\n\t\t*/\n\t\tgetNodeValue : function (obj, attr) {\n\t\t\tvar index = attr.indexOf('.');\n\t\t\tif (index > 0) {\n\t\t\t\tvar _obj = obj[attr.substring(0, index)];\n\t\t\t\tvar _attr = attr.substring(index + 1, attr.length);\n\t\t\t\treturn this.getNodeValue(_obj, _attr);\n\t\t\t}\n\t\t\telse {\n\t\t\t\tif (obj.hasOwnProperty(attr)) {\n\t\t\t\t\treturn obj[attr].toString();\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\treturn undefined;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t});\n\n\tvar logError = function (message) {\n\t\tif (window.console) {\n\t\t\twindow.console.error(message);\n\t\t}\n\t};\n\n\n    plugins.register(TreeView,\"treeview\");\n\n\treturn skylark.attach(\"intg.bs3.TreeView\",TreeView);\n});"]}