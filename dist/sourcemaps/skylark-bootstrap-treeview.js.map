{"version":3,"sources":["skylark-bootstrap-treeview.js"],"names":["define","skylark","langx","$","plugins","Widget","TreeView","inherit","klassName","pluginName","widgetClass","options","multiSelect","multiTier","nest","levels","selectors","children","classes","expandIcon","collapseIcon","item","injectStyle","emptyIcon","nodeIcon","selectedIcon","checkedIcon","uncheckedIcon","colors","normal","undefined","normalBack","border","onhover","selected","selectedBack","searchResult","searchResultBack","enableLinks","highlightSelected","highlightSearchResults","showBorder","showIcon","showCheckbox","showTags","search","ignoreCase","exactMatch","revealResults","noding","silent","ignoreChildren","templates","list","indent","icon","link","badge","onNodeChecked","onNodeCollapsed","onNodeDisabled","onNodeEnabled","onNodeExpanded","onNodeSelected","onNodeUnchecked","onNodeUnselected","onSearchComplete","onSearchCleared","css","_init","this","element","_elm","$element","elementId","id","styleId","tree","nodes","data","JSON","parse","extend","destroy","subscribeEvents","setInitialStates","render","reset","mixin","remove","datax","removeData","initialized","$wrapper","unsubscribeEvents","off","on","proxy","clickHandler","node","level","parent","_this","each","index","nodeId","length","parentId","hasOwnProperty","selectable","state","checked","disabled","expanded","push","event","preventDefault","target","findNode","classList","attr","split","indexOf","toggleExpandedState","toggleCheckedState","toggleSelectedState","closest","console","log","setExpandedState","trigger","setSelectedState","findNodes","setCheckedState","setDisabledState","addClass","empty","append","buildTree","treeItem","buildStyleOverride","i","join","pop","href","text","tags","tag","color","backColor","document","getElementById","buildStyle","appendTo","style","getNode","getParent","identifier","identifyNode","getSiblings","filter","obj","getSelected","getUnselected","getExpanded","getCollapsed","getChecked","getUnchecked","getDisabled","getEnabled","selectNode","identifiers","forEachIdentifier","unselectNode","toggleNodeSelected","collapseAll","collapseNode","expandAll","expandLevels","expandNode","revealNode","parentNode","toggleNodeExpanded","checkAll","checkNode","uncheckAll","uncheckNode","toggleNodeChecked","disableAll","disableNode","enableAll","enableNode","toggleNodeDisabled","callback","Array","pattern","clearSearch","results","modifier","attribute","grep","val","getNodeValue","match","RegExp","_obj","substring","_attr","toString","register","args","apply","main"],"mappings":"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","file":"../skylark-bootstrap-treeview.js","sourcesContent":["define('skylark-bootstrap-treeview/TreeView',[\n  \"skylark-langx/skylark\",\n  \"skylark-langx/langx\",\n  \"skylark-domx-query\",\n  \"skylark-utils-dom/plugins\",\n  \"skylark-widgets-base/Widget\"  \n], function(skylark,langx,$,plugins,Widget) {\n\n  /*global jQuery, console*/\n\n  'use strict';\n\n\n  var TreeView =  Widget.inherit({\n    klassName: \"TreeView\",\n\n    pluginName : \"treeview\",\n\n    widgetClass : \"treeview\",\n\n    options : {\n      multiSelect: false,\n      //multiTier : false,\n      //levels: 2,\n\n      multiTier : {\n        nest   : true,\n      //  popup  : true,\n        levels : 2,\n        selectors :  {\n          children : \".list-group.children\"\n        },\n        classes : {\n          expandIcon: 'glyphicon glyphicon-plus',\n          collapseIcon: 'glyphicon glyphicon-minus',\n          children : \"list-group children\"\n        }\n      },\n\n      selectors : {\n        item : \".list-group-item\",\n        children : \".list-group\"\n      },\n\n      injectStyle: true,\n\n\n      emptyIcon: 'glyphicon',\n      nodeIcon: '',\n      selectedIcon: '',\n      checkedIcon: 'glyphicon glyphicon-check',\n      uncheckedIcon: 'glyphicon glyphicon-unchecked',\n\n\n      colors : {\n        normal: undefined, // '#000000',\n        normalBack: undefined, // '#FFFFFF',\n        border: undefined, // '#dddddd',\n        onhover: '#F5F5F5',\n        selected: '#FFFFFF',\n        selectedBack: '#428bca',\n        searchResult: '#D9534F',\n        searchResultBack: undefined //'#FFFFFF',\n      },\n\n\n      enableLinks: false,\n      highlightSelected: true,\n      highlightSearchResults: true,\n      showBorder: true,\n      showIcon: true,\n      showCheckbox: false,\n      showTags: false,\n\n      search : {\n        ignoreCase: true, \n        exactMatch: false,\n        revealResults: true    \n      },\n\n      noding : {\n        silent: false,\n        ignoreChildren: false\n      },\n\n\n      templates : {\n        list: '<ul class=\"list-group\"></ul>',\n        item: '<li class=\"list-group-item\"></li>',\n        indent: '<span class=\"indent\"></span>',\n        icon: '<span class=\"icon\"></span>',\n        link: '<a href=\"#\" style=\"color:inherit;\"></a>',\n        badge: '<span class=\"badge\"></span>'\n      },\n\n\n      // Event handlers\n      onNodeChecked: undefined,\n      onNodeCollapsed: undefined,\n      onNodeDisabled: undefined,\n      onNodeEnabled: undefined,\n      onNodeExpanded: undefined,\n      onNodeSelected: undefined,\n      onNodeUnchecked: undefined,\n      onNodeUnselected: undefined,\n      onSearchComplete: undefined,\n      onSearchCleared: undefined\n\n    },   \n\n\n    css : '.Tree .list-group-item{cursor:pointer}.Tree span.indent{margin-left:10px;margin-right:10px}.Tree span.icon{width:12px;margin-right:5px}.Tree .node-disabled{color:silver;cursor:not-allowed}' ,\n\n\n    _init : function () {\n\n      var options = this.options,\n          element = this._elm;\n\n      this.$element = $(element);\n      this.elementId = element.id;\n      this.styleId = this.elementId + '-style';\n\n\n      this.tree = [];\n      this.nodes = [];\n\n      if (options.data) {\n        if (typeof options.data === 'string') {\n          options.data = JSON.parse(options.data);\n        }\n        this.tree = langx.extend(true, [], options.data);\n      }\n\n      this.destroy();\n      this.subscribeEvents();\n      this.setInitialStates({ nodes: this.tree }, 0);\n      this.render();\n    },\n\n    reset : function(options) {\n      langx.mixin(this.options,options);\n    \treturn this._init();\n    },\n\n    remove : function () {\n      this.destroy();\n      datax.removeData(this, this.pluginName);\n      $('#' + this.styleId).remove();\n    },\n\n    destroy : function () {\n\n      if (!this.initialized) return;\n\n      this.$wrapper.remove();\n      this.$wrapper = null;\n\n      // Switch off events\n      this.unsubscribeEvents();\n\n      // Reset this.initialized flag\n      this.initialized = false;\n    },\n\n    unsubscribeEvents : function () {\n\n      this.$element.off('click');\n      this.$element.off('nodeChecked');\n      this.$element.off('nodeCollapsed');\n      this.$element.off('nodeDisabled');\n      this.$element.off('nodeEnabled');\n      this.$element.off('nodeExpanded');\n      this.$element.off('nodeSelected');\n      this.$element.off('nodeUnchecked');\n      this.$element.off('nodeUnselected');\n      this.$element.off('searchComplete');\n      this.$element.off('searchCleared');\n    },\n\n    subscribeEvents : function () {\n\n      this.unsubscribeEvents();\n\n      this.$element.on('click', langx.proxy(this.clickHandler, this));\n\n      if (typeof (this.options.onNodeChecked) === 'function') {\n        this.$element.on('nodeChecked', this.options.onNodeChecked);\n      }\n\n      if (typeof (this.options.onNodeCollapsed) === 'function') {\n        this.$element.on('nodeCollapsed', this.options.onNodeCollapsed);\n      }\n\n      if (typeof (this.options.onNodeDisabled) === 'function') {\n        this.$element.on('nodeDisabled', this.options.onNodeDisabled);\n      }\n\n      if (typeof (this.options.onNodeEnabled) === 'function') {\n        this.$element.on('nodeEnabled', this.options.onNodeEnabled);\n      }\n\n      if (typeof (this.options.onNodeExpanded) === 'function') {\n        this.$element.on('nodeExpanded', this.options.onNodeExpanded);\n      }\n\n      if (typeof (this.options.onNodeSelected) === 'function') {\n        this.$element.on('nodeSelected', this.options.onNodeSelected);\n      }\n\n      if (typeof (this.options.onNodeUnchecked) === 'function') {\n        this.$element.on('nodeUnchecked', this.options.onNodeUnchecked);\n      }\n\n      if (typeof (this.options.onNodeUnselected) === 'function') {\n        this.$element.on('nodeUnselected', this.options.onNodeUnselected);\n      }\n\n      if (typeof (this.options.onSearchComplete) === 'function') {\n        this.$element.on('searchComplete', this.options.onSearchComplete);\n      }\n\n      if (typeof (this.options.onSearchCleared) === 'function') {\n        this.$element.on('searchCleared', this.options.onSearchCleared);\n      }\n    },\n\n    /*\n      Recurse the tree structure and ensure all nodes have\n      valid initial states.  User defined states will be preserved.\n      For performance we also take this opportunity to\n      index nodes in a flattened structure\n    */\n    setInitialStates : function (node, level) {\n\n      if (!node.nodes) return;\n      level += 1;\n\n      var parent = node;\n      var _this = this;\n      langx.each(node.nodes, function checkStates(index, node) {\n\n        // nodeId : unique, incremental identifier\n        node.nodeId = _this.nodes.length;\n\n        // parentId : transversing up the tree\n        node.parentId = parent.nodeId;\n\n        // if not provided set selectable default value\n        if (!node.hasOwnProperty('selectable')) {\n          node.selectable = true;\n        }\n\n        // where provided we should preserve states\n        node.state = node.state || {};\n\n        // set checked state; unless set always false\n        if (!node.state.hasOwnProperty('checked')) {\n          node.state.checked = false;\n        }\n\n        // set enabled state; unless set always false\n        if (!node.state.hasOwnProperty('disabled')) {\n          node.state.disabled = false;\n        }\n\n        // set expanded state; if not provided based on levels\n        if (!node.state.hasOwnProperty('expanded')) {\n          if (!node.state.disabled &&\n              (level < _this.options.multiTier.levels) &&\n              (node.nodes && node.nodes.length > 0)) {\n            node.state.expanded = true;\n          }\n          else {\n            node.state.expanded = false;\n          }\n        }\n\n        // set selected state; unless set always false\n        if (!node.state.hasOwnProperty('selected')) {\n          node.state.selected = false;\n        }\n\n        // index nodes in a flattened structure for use later\n        _this.nodes.push(node);\n\n        // recurse child nodes and transverse the tree\n        if (node.nodes) {\n          _this.setInitialStates(node, level);\n        }\n      });\n    },\n\n    clickHandler : function (event) {\n\n      if (!this.options.enableLinks) event.preventDefault();\n\n      var target = $(event.target);\n      var node = this.findNode(target);\n      if (!node || node.state.disabled) return;\n      \n      var classList = target.attr('class') ? target.attr('class').split(' ') : [];\n      if ((classList.indexOf('expand-icon') !== -1)) {\n\n        this.toggleExpandedState(node,this.options.noding);\n        this.render();\n      }\n      else if ((classList.indexOf('check-icon') !== -1)) {\n        \n        this.toggleCheckedState(node,this.options.noding);\n        this.render();\n      }\n      else {\n        \n        if (node.selectable) {\n          this.toggleSelectedState(node,this.options.noding);\n        } else {\n          this.toggleExpandedState(node,this.options.noding);\n        }\n\n        this.render();\n      }\n    },\n\n    // Looks up the DOM for the closest parent list item to retrieve the\n    // data attribute nodeid, which is used to lookup the node in the flattened structure.\n    findNode : function (target) {\n\n      //var nodeId = target.closest('li.list-group-item').attr('data-nodeid');\n      var nodeId = target.closest(this.options.selectors.item).attr('data-nodeid');\n      var node = this.nodes[nodeId];\n\n      if (!node) {\n        console.log('Error: node does not exist');\n      }\n      return node;\n    },\n\n    toggleExpandedState : function (node, options) {\n      if (!node) return;\n      this.setExpandedState(node, !node.state.expanded, options);\n    },\n\n    setExpandedState : function (node, state, options) {\n\n      if (state === node.state.expanded) return;\n\n      if (state && node.nodes) {\n\n        // Expand a node\n        node.state.expanded = true;\n        if (!options.silent) {\n          this.$element.trigger('nodeExpanded', langx.extend(true, {}, node));\n        }\n      }\n      else if (!state) {\n\n        // Collapse a node\n        node.state.expanded = false;\n        if (!options.silent) {\n          this.$element.trigger('nodeCollapsed', langx.extend(true, {}, node));\n        }\n\n        // Collapse child nodes\n        if (node.nodes && !options.ignoreChildren) {\n          langx.each(node.nodes, langx.proxy(function (index, node) {\n            this.setExpandedState(node, false, options);\n          }, this));\n        }\n      }\n    },\n\n    toggleSelectedState : function (node, options) {\n      if (!node) return;\n      this.setSelectedState(node, !node.state.selected, options);\n    },\n\n    setSelectedState : function (node, state, options) {\n\n      if (state === node.state.selected) return;\n\n      if (state) {\n\n        // If multiSelect false, unselect previously selected\n        if (!this.options.multiSelect) {\n          langx.each(this.findNodes('true', 'g', 'state.selected'), langx.proxy(function (index, node) {\n            this.setSelectedState(node, false, options);\n          }, this));\n        }\n\n        // Continue selecting node\n        node.state.selected = true;\n        if (!options.silent) {\n          this.$element.trigger('nodeSelected', langx.extend(true, {}, node));\n        }\n      }\n      else {\n\n        // Unselect node\n        node.state.selected = false;\n        if (!options.silent) {\n          this.$element.trigger('nodeUnselected', langx.extend(true, {}, node));\n        }\n      }\n    },\n\n    toggleCheckedState : function (node, options) {\n      if (!node) return;\n      this.setCheckedState(node, !node.state.checked, options);\n    },\n\n    setCheckedState : function (node, state, options) {\n\n      if (state === node.state.checked) return;\n\n      if (state) {\n\n        // Check node\n        node.state.checked = true;\n\n        if (!options.silent) {\n          this.$element.trigger('nodeChecked', langx.extend(true, {}, node));\n        }\n      }\n      else {\n\n        // Uncheck node\n        node.state.checked = false;\n        if (!options.silent) {\n          this.$element.trigger('nodeUnchecked', langx.extend(true, {}, node));\n        }\n      }\n    },\n\n    setDisabledState : function (node, state, options) {\n\n      if (state === node.state.disabled) return;\n\n      if (state) {\n\n        // Disable node\n        node.state.disabled = true;\n\n        // Disable all other states\n        this.setExpandedState(node, false, options);\n        this.setSelectedState(node, false, options);\n        this.setCheckedState(node, false, options);\n\n        if (!options.silent) {\n          this.$element.trigger('nodeDisabled', langx.extend(true, {}, node));\n        }\n      }\n      else {\n\n        // Enabled node\n        node.state.disabled = false;\n        if (!options.silent) {\n          this.$element.trigger('nodeEnabled', langx.extend(true, {}, node));\n        }\n      }\n    },\n\n    render : function () {\n\n      if (!this.initialized) {\n\n        // Setup first time only components\n        this.$element.addClass(this.widgetClass);\n        this.$wrapper = $(this.options.templates.list);\n\n        this.injectStyle();\n\n        this.initialized = true;\n      }\n\n      this.$element.empty().append(this.$wrapper.empty());\n\n      // Build tree\n      this.buildTree(this.tree, 0);\n    },\n\n    // Starting from the root node, and recursing down the\n    // structure we build the tree one node at a time\n    buildTree : function (nodes, level) {\n\n      if (!nodes) return;\n      level += 1;\n\n      var _this = this;\n      langx.each(nodes, function addNodes(id, node) {\n\n        var treeItem = $(_this.options.templates.item)\n          .addClass('node-' + _this.elementId)\n          .addClass(node.state.checked ? 'node-checked' : '')\n          .addClass(node.state.disabled ? 'node-disabled': '')\n          .addClass(node.state.selected ? 'node-selected' : '')\n          .addClass(node.searchResult ? 'search-result' : '') \n          .attr('data-nodeid', node.nodeId)\n          .attr('style', _this.buildStyleOverride(node));\n\n        // Add indent/spacer to mimic tree structure\n        for (var i = 0; i < (level - 1); i++) {\n          treeItem.append(_this.options.templates.indent);\n        }\n\n        // Add expand, collapse or empty spacer icons\n        var classList = [];\n        if (node.nodes) {\n          classList.push('expand-icon');\n          if (node.state.expanded) {\n            classList.push(_this.options.multiTier.classes.collapseIcon);\n          }\n          else {\n            classList.push(_this.options.multiTier.classes.expandIcon);\n          }\n        }\n        else {\n          classList.push(_this.options.emptyIcon);\n        }\n\n        treeItem\n          .append($(_this.options.templates.icon)\n            .addClass(classList.join(' '))\n          );\n\n\n        // Add node icon\n        if (_this.options.showIcon) {\n          \n          var classList = ['node-icon'];\n\n          classList.push(node.icon || _this.options.nodeIcon);\n          if (node.state.selected) {\n            classList.pop();\n            classList.push(node.selectedIcon || _this.options.selectedIcon || \n                    node.icon || _this.options.nodeIcon);\n          }\n\n          treeItem\n            .append($(_this.options.templates.icon)\n              .addClass(classList.join(' '))\n            );\n        }\n\n        // Add check / unchecked icon\n        if (_this.options.showCheckbox) {\n\n          var classList = ['check-icon'];\n          if (node.state.checked) {\n            classList.push(_this.options.checkedIcon); \n          }\n          else {\n            classList.push(_this.options.uncheckedIcon);\n          }\n\n          treeItem\n            .append($(_this.options.templates.icon)\n              .addClass(classList.join(' '))\n            );\n        }\n\n        // Add text\n        if (_this.options.enableLinks) {\n          // Add hyperlink\n          treeItem\n            .append($(_this.options.templates.link)\n              .attr('href', node.href)\n              .append(node.text)\n            );\n        }\n        else {\n          // otherwise just text\n          treeItem\n            .append(node.text);\n        }\n\n        // Add tags as badges\n        if (_this.options.showTags && node.tags) {\n          langx.each(node.tags, function addTag(id, tag) {\n            treeItem\n              .append($(_this.options.templates.badge)\n                .append(tag)\n              );\n          });\n        }\n\n        // Add item to the tree\n        _this.$wrapper.append(treeItem);\n\n        // Recursively add child ndoes\n        if (node.nodes && node.state.expanded && !node.state.disabled) {\n          return _this.buildTree(node.nodes, level,treeItem);\n        }\n      });\n    },\n\n    // Define any node level style override for\n    // 1. selectedNode\n    // 2. node|data assigned color overrides\n    buildStyleOverride : function (node) {\n\n      if (node.state.disabled) return '';\n\n      var color = node.color;\n      var backColor = node.backColor;\n\n      if (this.options.highlightSelected && node.state.selected) {\n        if (this.options.colors.selected) {\n          color = this.options.colors.selected;\n        }\n        if (this.options.colors.selectedBack) {\n          backColor = this.options.colors.selectedBack;\n        }\n      }\n\n      if (this.options.highlightSearchResults && node.searchResult && !node.state.disabled) {\n        if (this.options.colors.searchResult) {\n          color = this.options.colors.searchResult;\n        }\n        if (this.options.colors.searchResultBack) {\n          backColor = this.options.colors.searchResultBack;\n        }\n      }\n\n      return 'color:' + color +\n        ';background-color:' + backColor + ';';\n    },\n\n    // Add inline style into head\n    injectStyle : function () {\n\n      if (this.options.injectStyle && !document.getElementById(this.styleId)) {\n        $('<style type=\"text/css\" id=\"' + this.styleId + '\"> ' + this.buildStyle() + ' </style>').appendTo('head');\n      }\n    },\n\n    // Construct trees style based on user options\n    buildStyle : function () {\n\n      var style = '.node-' + this.elementId + '{';\n\n      if (this.options.colors.normal) {\n        style += 'color:' + this.options.colors.normal + ';';\n      }\n\n      if (this.options.colors.normalBack) {\n        style += 'background-color:' + this.options.colors.normalBack + ';';\n      }\n\n      if (!this.options.showBorder) {\n        style += 'border:none;';\n      }\n      else if (this.options.colors.border) {\n        style += 'border:1px solid ' + this.options.colors.border + ';';\n      }\n      style += '}';\n\n      if (this.options.colors.onhover) {\n        style += '.node-' + this.elementId + ':not(.node-disabled):hover{' +\n          'background-color:' + this.options.colors.onhover + ';' +\n        '}';\n      }\n\n      return this.css + style;\n    },\n\n    /**\n      Returns a single node object that matches the given node id.\n      @param {Number} nodeId - A node's unique identifier\n      @return {Object} node - Matching node\n    */\n    getNode : function (nodeId) {\n      return this.nodes[nodeId];\n    },\n\n    /**\n      Returns the parent node of a given node, if valid otherwise returns undefined.\n      @param {Object|Number} identifier - A valid node or node id\n      @returns {Object} node - The parent node\n    */\n    getParent : function (identifier) {\n      var node = this.identifyNode(identifier);\n      return this.nodes[node.parentId];\n    },\n\n    /**\n      Returns an array of sibling nodes for a given node, if valid otherwise returns undefined.\n      @param {Object|Number} identifier - A valid node or node id\n      @returns {Array} nodes - Sibling nodes\n    */\n    getSiblings : function (identifier) {\n      var node = this.identifyNode(identifier);\n      var parent = this.getParent(node);\n      var nodes = parent ? parent.nodes : this.tree;\n      return nodes.filter(function (obj) {\n          return obj.nodeId !== node.nodeId;\n        });\n    },\n\n    /**\n      Returns an array of selected nodes.\n      @returns {Array} nodes - Selected nodes\n    */\n    getSelected : function () {\n      return this.findNodes('true', 'g', 'state.selected');\n    },\n\n    /**\n      Returns an array of unselected nodes.\n      @returns {Array} nodes - Unselected nodes\n    */\n    getUnselected : function () {\n      return this.findNodes('false', 'g', 'state.selected');\n    },\n\n    /**\n      Returns an array of expanded nodes.\n      @returns {Array} nodes - Expanded nodes\n    */\n    getExpanded : function () {\n      return this.findNodes('true', 'g', 'state.expanded');\n    },\n\n    /**\n      Returns an array of collapsed nodes.\n      @returns {Array} nodes - Collapsed nodes\n    */\n    getCollapsed : function () {\n      return this.findNodes('false', 'g', 'state.expanded');\n    },\n\n    /**\n      Returns an array of checked nodes.\n      @returns {Array} nodes - Checked nodes\n    */\n    getChecked : function () {\n      return this.findNodes('true', 'g', 'state.checked');\n    },\n\n    /**\n      Returns an array of unchecked nodes.\n      @returns {Array} nodes - Unchecked nodes\n    */\n    getUnchecked : function () {\n      return this.findNodes('false', 'g', 'state.checked');\n    },\n\n    /**\n      Returns an array of disabled nodes.\n      @returns {Array} nodes - Disabled nodes\n    */\n    getDisabled : function () {\n      return this.findNodes('true', 'g', 'state.disabled');\n    },\n\n    /**\n      Returns an array of enabled nodes.\n      @returns {Array} nodes - Enabled nodes\n    */\n    getEnabled : function () {\n      return this.findNodes('false', 'g', 'state.disabled');\n    },\n\n\n    /**\n      Set a node state to selected\n      @param {Object|Number} identifiers - A valid node, node id or array of node identifiers\n      @param {optional Object} options\n    */\n    selectNode : function (identifiers, options) {\n      this.forEachIdentifier(identifiers, options, langx.proxy(function (node, options) {\n        this.setSelectedState(node, true, options);\n      }, this));\n\n      this.render();\n    },\n\n    /**\n      Set a node state to unselected\n      @param {Object|Number} identifiers - A valid node, node id or array of node identifiers\n      @param {optional Object} options\n    */\n    unselectNode : function (identifiers, options) {\n      this.forEachIdentifier(identifiers, options, langx.proxy(function (node, options) {\n        this.setSelectedState(node, false, options);\n      }, this));\n\n      this.render();\n    },\n\n    /**\n      Toggles a node selected state; selecting if unselected, unselecting if selected.\n      @param {Object|Number} identifiers - A valid node, node id or array of node identifiers\n      @param {optional Object} options\n    */\n    toggleNodeSelected : function (identifiers, options) {\n      this.forEachIdentifier(identifiers, options, langx.proxy(function (node, options) {\n        this.toggleSelectedState(node, options);\n      }, this));\n\n      this.render();\n    },\n\n\n    /**\n      Collapse all tree nodes\n      @param {optional Object} options\n    */\n    collapseAll : function (options) {\n      var identifiers = this.findNodes('true', 'g', 'state.expanded');\n      this.forEachIdentifier(identifiers, options, langx.proxy(function (node, options) {\n        this.setExpandedState(node, false, options);\n      }, this));\n\n      this.render();\n    },\n\n    /**\n      Collapse a given tree node\n      @param {Object|Number} identifiers - A valid node, node id or array of node identifiers\n      @param {optional Object} options\n    */\n    collapseNode : function (identifiers, options) {\n      this.forEachIdentifier(identifiers, options, langx.proxy(function (node, options) {\n        this.setExpandedState(node, false, options);\n      }, this));\n\n      this.render();\n    },\n\n    /**\n      Expand all tree nodes\n      @param {optional Object} options\n    */\n    expandAll : function (options) {\n      options = langx.extend({},this.options.noding, options);\n\n      if (options && options.levels) {\n        this.expandLevels(this.tree, options.levels, options);\n      }\n      else {\n        var identifiers = this.findNodes('false', 'g', 'state.expanded');\n        this.forEachIdentifier(identifiers, options, langx.proxy(function (node, options) {\n          this.setExpandedState(node, true, options);\n        }, this));\n      }\n\n      this.render();\n    },\n\n    /**\n      Expand a given tree node\n      @param {Object|Number} identifiers - A valid node, node id or array of node identifiers\n      @param {optional Object} options\n    */\n    expandNode : function (identifiers, options) {\n      this.forEachIdentifier(identifiers, options, langx.proxy(function (node, options) {\n        this.setExpandedState(node, true, options);\n        if (node.nodes && (options && options.levels)) {\n          this.expandLevels(node.nodes, options.levels-1, options);\n        }\n      }, this));\n\n      this.render();\n    },\n\n    expandLevels : function (nodes, level, options) {\n      options = langx.extend({},this.options.noding, options);\n\n      langx.each(nodes, langx.proxy(function (index, node) {\n        this.setExpandedState(node, (level > 0) ? true : false, options);\n        if (node.nodes) {\n          this.expandLevels(node.nodes, level-1, options);\n        }\n      }, this));\n    },\n\n    /**\n      Reveals a given tree node, expanding the tree from node to root.\n      @param {Object|Number|Array} identifiers - A valid node, node id or array of node identifiers\n      @param {optional Object} options\n    */\n    revealNode : function (identifiers, options) {\n      this.forEachIdentifier(identifiers, options, langx.proxy(function (node, options) {\n        var parentNode = this.getParent(node);\n        while (parentNode) {\n          this.setExpandedState(parentNode, true, options);\n          parentNode = this.getParent(parentNode);\n        }\n      }, this));\n\n      this.render();\n    },\n\n    /**\n      Toggles a nodes expanded state; collapsing if expanded, expanding if collapsed.\n      @param {Object|Number} identifiers - A valid node, node id or array of node identifiers\n      @param {optional Object} options\n    */\n    toggleNodeExpanded : function (identifiers, options) {\n      this.forEachIdentifier(identifiers, options, langx.proxy(function (node, options) {\n        this.toggleExpandedState(node, options);\n      }, this));\n      \n      this.render();\n    },\n\n\n    /**\n      Check all tree nodes\n      @param {optional Object} options\n    */\n    checkAll : function (options) {\n      var identifiers = this.findNodes('false', 'g', 'state.checked');\n      this.forEachIdentifier(identifiers, options, langx.proxy(function (node, options) {\n        this.setCheckedState(node, true, options);\n      }, this));\n\n      this.render();\n    },\n\n    /**\n      Check a given tree node\n      @param {Object|Number} identifiers - A valid node, node id or array of node identifiers\n      @param {optional Object} options\n    */\n    checkNode : function (identifiers, options) {\n      this.forEachIdentifier(identifiers, options, langx.proxy(function (node, options) {\n        this.setCheckedState(node, true, options);\n      }, this));\n\n      this.render();\n    },\n\n    /**\n      Uncheck all tree nodes\n      @param {optional Object} options\n    */\n    uncheckAll : function (options) {\n      var identifiers = this.findNodes('true', 'g', 'state.checked');\n      this.forEachIdentifier(identifiers, options, langx.proxy(function (node, options) {\n        this.setCheckedState(node, false, options);\n      }, this));\n\n      this.render();\n    },\n\n    /**\n      Uncheck a given tree node\n      @param {Object|Number} identifiers - A valid node, node id or array of node identifiers\n      @param {optional Object} options\n    */\n    uncheckNode : function (identifiers, options) {\n      this.forEachIdentifier(identifiers, options, langx.proxy(function (node, options) {\n        this.setCheckedState(node, false, options);\n      }, this));\n\n      this.render();\n    },\n\n    /**\n      Toggles a nodes checked state; checking if unchecked, unchecking if checked.\n      @param {Object|Number} identifiers - A valid node, node id or array of node identifiers\n      @param {optional Object} options\n    */\n    toggleNodeChecked : function (identifiers, options) {\n      this.forEachIdentifier(identifiers, options, langx.proxy(function (node, options) {\n        this.toggleCheckedState(node, options);\n      }, this));\n\n      this.render();\n    },\n\n\n    /**\n      Disable all tree nodes\n      @param {optional Object} options\n    */\n    disableAll : function (options) {\n      var identifiers = this.findNodes('false', 'g', 'state.disabled');\n      this.forEachIdentifier(identifiers, options, langx.proxy(function (node, options) {\n        this.setDisabledState(node, true, options);\n      }, this));\n\n      this.render();\n    },\n\n    /**\n      Disable a given tree node\n      @param {Object|Number} identifiers - A valid node, node id or array of node identifiers\n      @param {optional Object} options\n    */\n    disableNode : function (identifiers, options) {\n      this.forEachIdentifier(identifiers, options, langx.proxy(function (node, options) {\n        this.setDisabledState(node, true, options);\n      }, this));\n\n      this.render();\n    },\n\n    /**\n      Enable all tree nodes\n      @param {optional Object} options\n    */\n    enableAll : function (options) {\n      var identifiers = this.findNodes('true', 'g', 'state.disabled');\n      this.forEachIdentifier(identifiers, options, langx.proxy(function (node, options) {\n        this.setDisabledState(node, false, options);\n      }, this));\n\n      this.render();\n    },\n\n    /**\n      Enable a given tree node\n      @param {Object|Number} identifiers - A valid node, node id or array of node identifiers\n      @param {optional Object} options\n    */\n    enableNode : function (identifiers, options) {\n      this.forEachIdentifier(identifiers, options, langx.proxy(function (node, options) {\n        this.setDisabledState(node, false, options);\n      }, this));\n\n      this.render();\n    },\n\n    /**\n      Toggles a nodes disabled state; disabling is enabled, enabling if disabled.\n      @param {Object|Number} identifiers - A valid node, node id or array of node identifiers\n      @param {optional Object} options\n    */\n    toggleNodeDisabled : function (identifiers, options) {\n      this.forEachIdentifier(identifiers, options, langx.proxy(function (node, options) {\n        this.setDisabledState(node, !node.state.disabled, options);\n      }, this));\n\n      this.render();\n    },\n\n\n    /**\n      Common code for processing multiple identifiers\n    */\n    forEachIdentifier : function (identifiers, options, callback) {\n\n      options = langx.extend({},this.options.noding, options);\n\n      if (!(identifiers instanceof Array)) {\n        identifiers = [identifiers];\n      }\n\n      langx.each(identifiers, langx.proxy(function (index, identifier) {\n        callback(this.identifyNode(identifier), options);\n      }, this));  \n    },\n\n    /*\n      Identifies a node from either a node id or object\n    */\n    identifyNode : function (identifier) {\n      return ((typeof identifier) === 'number') ?\n              this.nodes[identifier] :\n              identifier;\n    },\n\n    /**\n      Searches the tree for nodes (text) that match given criteria\n      @param {String} pattern - A given string to match against\n      @param {optional Object} options - Search criteria options\n      @return {Array} nodes - Matching nodes\n    */\n    search : function (pattern, options) {\n      options = langx.extend({},this.options.search, options);\n\n      this.clearSearch({ render: false });\n\n      var results = [];\n      if (pattern && pattern.length > 0) {\n\n        if (options.exactMatch) {\n          pattern = '^' + pattern + '$';\n        }\n\n        var modifier = 'g';\n        if (options.ignoreCase) {\n          modifier += 'i';\n        }\n\n        results = this.findNodes(pattern, modifier);\n\n        // Add searchResult property to all matching nodes\n        // This will be used to apply custom styles\n        // and when identifying result to be cleared\n        langx.each(results, function (index, node) {\n          node.searchResult = true;\n        })\n      }\n\n      // If revealResults, then render is triggered from revealNode\n      // otherwise we just call render.\n      if (options.revealResults) {\n        this.revealNode(results);\n      }\n      else {\n        this.render();\n      }\n\n      this.$element.trigger('searchComplete', langx.extend(true, {}, results));\n\n      return results;\n    },\n\n    /**\n      Clears previous search results\n    */\n    clearSearch : function (options) {\n\n      options = langx.extend({}, { render: true }, options);\n\n      var results = langx.each(this.findNodes('true', 'g', 'searchResult'), function (index, node) {\n        node.searchResult = false;\n      });\n\n      if (options.render) {\n        this.render();  \n      }\n      \n      this.$element.trigger('searchCleared', langx.extend(true, {}, results));\n    },\n\n    /**\n      Find nodes that match a given criteria\n      @param {String} pattern - A given string to match against\n      @param {optional String} modifier - Valid RegEx modifiers\n      @param {optional String} attribute - Attribute to compare pattern against\n      @return {Array} nodes - Nodes that match your criteria\n    */\n    findNodes : function (pattern, modifier, attribute) {\n\n      modifier = modifier || 'g';\n      attribute = attribute || 'text';\n\n      var _this = this;\n      return langx.grep(this.nodes, function (node) {\n        var val = _this.getNodeValue(node, attribute);\n        if (typeof val === 'string') {\n          return val.match(new RegExp(pattern, modifier));\n        }\n      });\n    },\n\n    /**\n      Recursive find for retrieving nested attributes values\n      All values are return as strings, unless invalid\n      @param {Object} obj - Typically a node, could be any object\n      @param {String} attr - Identifies an object property using dot notation\n      @return {String} value - Matching attributes string representation\n    */\n    getNodeValue : function (obj, attr) {\n      var index = attr.indexOf('.');\n      if (index > 0) {\n        var _obj = obj[attr.substring(0, index)];\n        var _attr = attr.substring(index + 1, attr.length);\n        return this.getNodeValue(_obj, _attr);\n      }\n      else {\n        if (obj.hasOwnProperty(attr)) {\n          return obj[attr].toString();\n        }\n        else {\n          return undefined;\n        }\n      }\n    }\n  });\n\n  plugins.register(TreeView,\"treeview\",function(options,args){\n\tif (typeof options === 'string') {\n\t\tif (!(args instanceof Array)) {\n\t\t\targs = [ args ];\n\t\t}\n\t\treturn this[options].apply(this, args);\n\t} else if (typeof options === 'boolean') {\n\t\treturn  this;\n\t} else {\n\t\tthis.reset(options);\n\t}\n\n   });\n\n  return TreeView;\n});\ndefine('skylark-bootstrap-treeview/main',[\r\n\t\"./TreeView\"\r\n],function(TreeView){\r\n\treturn TreeView;\r\n});\ndefine('skylark-bootstrap-treeview', ['skylark-bootstrap-treeview/main'], function (main) { return main; });\n\n"]}