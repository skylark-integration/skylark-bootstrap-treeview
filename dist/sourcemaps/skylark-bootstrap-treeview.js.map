{"version":3,"sources":["skylark-bootstrap-treeview.js"],"names":["define","skylark","langx","$","plugins","_default","settings","injectStyle","levels","expandIcon","collapseIcon","emptyIcon","nodeIcon","selectedIcon","checkedIcon","uncheckedIcon","color","undefined","backColor","borderColor","onhoverColor","selectedColor","selectedBackColor","searchResultColor","searchResultBackColor","enableLinks","highlightSelected","highlightSearchResults","showBorder","showIcon","showCheckbox","showTags","multiSelect","onNodeChecked","onNodeCollapsed","onNodeDisabled","onNodeEnabled","onNodeExpanded","onNodeSelected","onNodeUnchecked","onNodeUnselected","onSearchComplete","onSearchCleared","options","silent","ignoreChildren","searchOptions","ignoreCase","exactMatch","revealResults","TreeView","Plugin","inherit","klassName","pluginName","template","list","item","indent","icon","link","badge","css","_construct","element","this","$element","elementId","id","styleId","init","tree","nodes","data","JSON","parse","extend","destroy","subscribeEvents","setInitialStates","render","remove","datax","removeData","initialized","$wrapper","unsubscribeEvents","off","on","proxy","clickHandler","node","level","parent","_this","each","index","nodeId","length","parentId","hasOwnProperty","selectable","state","checked","disabled","expanded","selected","push","event","preventDefault","target","findNode","classList","attr","split","indexOf","toggleExpandedState","toggleCheckedState","toggleSelectedState","closest","console","log","setExpandedState","trigger","setSelectedState","findNodes","setCheckedState","setDisabledState","addClass","empty","append","buildTree","treeItem","searchResult","buildStyleOverride","i","join","pop","href","text","tags","tag","document","getElementById","buildStyle","appendTo","style","getNode","getParent","identifier","identifyNode","getSiblings","filter","obj","getSelected","getUnselected","getExpanded","getCollapsed","getChecked","getUnchecked","getDisabled","getEnabled","selectNode","identifiers","forEachIdentifier","unselectNode","toggleNodeSelected","collapseAll","collapseNode","expandAll","expandLevels","expandNode","revealNode","parentNode","toggleNodeExpanded","checkAll","checkNode","uncheckAll","uncheckNode","toggleNodeChecked","disableAll","disableNode","enableAll","enableNode","toggleNodeDisabled","callback","Array","search","pattern","clearSearch","results","modifier","attribute","grep","val","getNodeValue","match","RegExp","_obj","substring","_attr","toString","register","args","apply","attach","main"],"mappings":"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","file":"../skylark-bootstrap-treeview.js","sourcesContent":["define('skylark-bootstrap-treeview/TreeView',[\n\t\"skylark-langx/skylark\",\n\t\"skylark-langx/langx\",\n\t\"skylark-domx-query\",\n  \t\"skylark-utils-dom/plugins\"\n], function(skylark,langx,$,plugins) {\n\n\t/*global jQuery, console*/\n\n\t'use strict';\n\n\n\tvar pluginName = 'treeview';\n\n\tvar _default = {};\n\n\t_default.settings = {\n\n\t\tinjectStyle: true,\n\n\t\tlevels: 2,\n\n\t\texpandIcon: 'glyphicon glyphicon-plus',\n\t\tcollapseIcon: 'glyphicon glyphicon-minus',\n\t\temptyIcon: 'glyphicon',\n\t\tnodeIcon: '',\n\t\tselectedIcon: '',\n\t\tcheckedIcon: 'glyphicon glyphicon-check',\n\t\tuncheckedIcon: 'glyphicon glyphicon-unchecked',\n\n\t\tcolor: undefined, // '#000000',\n\t\tbackColor: undefined, // '#FFFFFF',\n\t\tborderColor: undefined, // '#dddddd',\n\t\tonhoverColor: '#F5F5F5',\n\t\tselectedColor: '#FFFFFF',\n\t\tselectedBackColor: '#428bca',\n\t\tsearchResultColor: '#D9534F',\n\t\tsearchResultBackColor: undefined, //'#FFFFFF',\n\n\t\tenableLinks: false,\n\t\thighlightSelected: true,\n\t\thighlightSearchResults: true,\n\t\tshowBorder: true,\n\t\tshowIcon: true,\n\t\tshowCheckbox: false,\n\t\tshowTags: false,\n\t\tmultiSelect: false,\n\n\t\t// Event handlers\n\t\tonNodeChecked: undefined,\n\t\tonNodeCollapsed: undefined,\n\t\tonNodeDisabled: undefined,\n\t\tonNodeEnabled: undefined,\n\t\tonNodeExpanded: undefined,\n\t\tonNodeSelected: undefined,\n\t\tonNodeUnchecked: undefined,\n\t\tonNodeUnselected: undefined,\n\t\tonSearchComplete: undefined,\n\t\tonSearchCleared: undefined\n\t};\n\n\t_default.options = {\n\t\tsilent: false,\n\t\tignoreChildren: false\n\t};\n\n\t_default.searchOptions = {\n\t\tignoreCase: true,\n\t\texactMatch: false,\n\t\trevealResults: true\n\t};\n\n\tvar TreeView =  plugins.Plugin.inherit({\n\t\tklassName: \"TreeView\",\n\n\t\tpluginName : \"bs3.TreeView\",\n\n\t\ttemplate : {\n\t\t\tlist: '<ul class=\"list-group\"></ul>',\n\t\t\titem: '<li class=\"list-group-item\"></li>',\n\t\t\tindent: '<span class=\"indent\"></span>',\n\t\t\ticon: '<span class=\"icon\"></span>',\n\t\t\tlink: '<a href=\"#\" style=\"color:inherit;\"></a>',\n\t\t\tbadge: '<span class=\"badge\"></span>'\n\t\t},\n\n\t\tcss : '.treeview .list-group-item{cursor:pointer}.treeview span.indent{margin-left:10px;margin-right:10px}.treeview span.icon{width:12px;margin-right:5px}.treeview .node-disabled{color:silver;cursor:not-allowed}' ,\n\n\t\t_construct : function (element, options) {\n\n\t\t\tthis.$element = $(element);\n\t\t\tthis.elementId = element.id;\n\t\t\tthis.styleId = this.elementId + '-style';\n\n\t\t\tthis.init(options);\n\t\t},\n\n\t\tinit : function (options) {\n\n\t\t\tthis.tree = [];\n\t\t\tthis.nodes = [];\n\n\t\t\tif (options.data) {\n\t\t\t\tif (typeof options.data === 'string') {\n\t\t\t\t\toptions.data = JSON.parse(options.data);\n\t\t\t\t}\n\t\t\t\tthis.tree = langx.extend(true, [], options.data);\n\t\t\t\tdelete options.data;\n\t\t\t}\n\t\t\tthis.options = langx.extend({}, _default.settings, options);\n\n\t\t\tthis.destroy();\n\t\t\tthis.subscribeEvents();\n\t\t\tthis.setInitialStates({ nodes: this.tree }, 0);\n\t\t\tthis.render();\n\t\t},\n\n\t\tremove : function () {\n\t\t\tthis.destroy();\n\t\t\tdatax.removeData(this, pluginName);\n\t\t\t$('#' + this.styleId).remove();\n\t\t},\n\n\t\tdestroy : function () {\n\n\t\t\tif (!this.initialized) return;\n\n\t\t\tthis.$wrapper.remove();\n\t\t\tthis.$wrapper = null;\n\n\t\t\t// Switch off events\n\t\t\tthis.unsubscribeEvents();\n\n\t\t\t// Reset this.initialized flag\n\t\t\tthis.initialized = false;\n\t\t},\n\n\t\tunsubscribeEvents : function () {\n\n\t\t\tthis.$element.off('click');\n\t\t\tthis.$element.off('nodeChecked');\n\t\t\tthis.$element.off('nodeCollapsed');\n\t\t\tthis.$element.off('nodeDisabled');\n\t\t\tthis.$element.off('nodeEnabled');\n\t\t\tthis.$element.off('nodeExpanded');\n\t\t\tthis.$element.off('nodeSelected');\n\t\t\tthis.$element.off('nodeUnchecked');\n\t\t\tthis.$element.off('nodeUnselected');\n\t\t\tthis.$element.off('searchComplete');\n\t\t\tthis.$element.off('searchCleared');\n\t\t},\n\n\t\tsubscribeEvents : function () {\n\n\t\t\tthis.unsubscribeEvents();\n\n\t\t\tthis.$element.on('click', langx.proxy(this.clickHandler, this));\n\n\t\t\tif (typeof (this.options.onNodeChecked) === 'function') {\n\t\t\t\tthis.$element.on('nodeChecked', this.options.onNodeChecked);\n\t\t\t}\n\n\t\t\tif (typeof (this.options.onNodeCollapsed) === 'function') {\n\t\t\t\tthis.$element.on('nodeCollapsed', this.options.onNodeCollapsed);\n\t\t\t}\n\n\t\t\tif (typeof (this.options.onNodeDisabled) === 'function') {\n\t\t\t\tthis.$element.on('nodeDisabled', this.options.onNodeDisabled);\n\t\t\t}\n\n\t\t\tif (typeof (this.options.onNodeEnabled) === 'function') {\n\t\t\t\tthis.$element.on('nodeEnabled', this.options.onNodeEnabled);\n\t\t\t}\n\n\t\t\tif (typeof (this.options.onNodeExpanded) === 'function') {\n\t\t\t\tthis.$element.on('nodeExpanded', this.options.onNodeExpanded);\n\t\t\t}\n\n\t\t\tif (typeof (this.options.onNodeSelected) === 'function') {\n\t\t\t\tthis.$element.on('nodeSelected', this.options.onNodeSelected);\n\t\t\t}\n\n\t\t\tif (typeof (this.options.onNodeUnchecked) === 'function') {\n\t\t\t\tthis.$element.on('nodeUnchecked', this.options.onNodeUnchecked);\n\t\t\t}\n\n\t\t\tif (typeof (this.options.onNodeUnselected) === 'function') {\n\t\t\t\tthis.$element.on('nodeUnselected', this.options.onNodeUnselected);\n\t\t\t}\n\n\t\t\tif (typeof (this.options.onSearchComplete) === 'function') {\n\t\t\t\tthis.$element.on('searchComplete', this.options.onSearchComplete);\n\t\t\t}\n\n\t\t\tif (typeof (this.options.onSearchCleared) === 'function') {\n\t\t\t\tthis.$element.on('searchCleared', this.options.onSearchCleared);\n\t\t\t}\n\t\t},\n\n\t\t/*\n\t\t\tRecurse the tree structure and ensure all nodes have\n\t\t\tvalid initial states.  User defined states will be preserved.\n\t\t\tFor performance we also take this opportunity to\n\t\t\tindex nodes in a flattened structure\n\t\t*/\n\t\tsetInitialStates : function (node, level) {\n\n\t\t\tif (!node.nodes) return;\n\t\t\tlevel += 1;\n\n\t\t\tvar parent = node;\n\t\t\tvar _this = this;\n\t\t\tlangx.each(node.nodes, function checkStates(index, node) {\n\n\t\t\t\t// nodeId : unique, incremental identifier\n\t\t\t\tnode.nodeId = _this.nodes.length;\n\n\t\t\t\t// parentId : transversing up the tree\n\t\t\t\tnode.parentId = parent.nodeId;\n\n\t\t\t\t// if not provided set selectable default value\n\t\t\t\tif (!node.hasOwnProperty('selectable')) {\n\t\t\t\t\tnode.selectable = true;\n\t\t\t\t}\n\n\t\t\t\t// where provided we should preserve states\n\t\t\t\tnode.state = node.state || {};\n\n\t\t\t\t// set checked state; unless set always false\n\t\t\t\tif (!node.state.hasOwnProperty('checked')) {\n\t\t\t\t\tnode.state.checked = false;\n\t\t\t\t}\n\n\t\t\t\t// set enabled state; unless set always false\n\t\t\t\tif (!node.state.hasOwnProperty('disabled')) {\n\t\t\t\t\tnode.state.disabled = false;\n\t\t\t\t}\n\n\t\t\t\t// set expanded state; if not provided based on levels\n\t\t\t\tif (!node.state.hasOwnProperty('expanded')) {\n\t\t\t\t\tif (!node.state.disabled &&\n\t\t\t\t\t\t\t(level < _this.options.levels) &&\n\t\t\t\t\t\t\t(node.nodes && node.nodes.length > 0)) {\n\t\t\t\t\t\tnode.state.expanded = true;\n\t\t\t\t\t}\n\t\t\t\t\telse {\n\t\t\t\t\t\tnode.state.expanded = false;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\t// set selected state; unless set always false\n\t\t\t\tif (!node.state.hasOwnProperty('selected')) {\n\t\t\t\t\tnode.state.selected = false;\n\t\t\t\t}\n\n\t\t\t\t// index nodes in a flattened structure for use later\n\t\t\t\t_this.nodes.push(node);\n\n\t\t\t\t// recurse child nodes and transverse the tree\n\t\t\t\tif (node.nodes) {\n\t\t\t\t\t_this.setInitialStates(node, level);\n\t\t\t\t}\n\t\t\t});\n\t\t},\n\n\t\tclickHandler : function (event) {\n\n\t\t\tif (!this.options.enableLinks) event.preventDefault();\n\n\t\t\tvar target = $(event.target);\n\t\t\tvar node = this.findNode(target);\n\t\t\tif (!node || node.state.disabled) return;\n\t\t\t\n\t\t\tvar classList = target.attr('class') ? target.attr('class').split(' ') : [];\n\t\t\tif ((classList.indexOf('expand-icon') !== -1)) {\n\n\t\t\t\tthis.toggleExpandedState(node, _default.options);\n\t\t\t\tthis.render();\n\t\t\t}\n\t\t\telse if ((classList.indexOf('check-icon') !== -1)) {\n\t\t\t\t\n\t\t\t\tthis.toggleCheckedState(node, _default.options);\n\t\t\t\tthis.render();\n\t\t\t}\n\t\t\telse {\n\t\t\t\t\n\t\t\t\tif (node.selectable) {\n\t\t\t\t\tthis.toggleSelectedState(node, _default.options);\n\t\t\t\t} else {\n\t\t\t\t\tthis.toggleExpandedState(node, _default.options);\n\t\t\t\t}\n\n\t\t\t\tthis.render();\n\t\t\t}\n\t\t},\n\n\t\t// Looks up the DOM for the closest parent list item to retrieve the\n\t\t// data attribute nodeid, which is used to lookup the node in the flattened structure.\n\t\tfindNode : function (target) {\n\n\t\t\tvar nodeId = target.closest('li.list-group-item').attr('data-nodeid');\n\t\t\tvar node = this.nodes[nodeId];\n\n\t\t\tif (!node) {\n\t\t\t\tconsole.log('Error: node does not exist');\n\t\t\t}\n\t\t\treturn node;\n\t\t},\n\n\t\ttoggleExpandedState : function (node, options) {\n\t\t\tif (!node) return;\n\t\t\tthis.setExpandedState(node, !node.state.expanded, options);\n\t\t},\n\n\t\tsetExpandedState : function (node, state, options) {\n\n\t\t\tif (state === node.state.expanded) return;\n\n\t\t\tif (state && node.nodes) {\n\n\t\t\t\t// Expand a node\n\t\t\t\tnode.state.expanded = true;\n\t\t\t\tif (!options.silent) {\n\t\t\t\t\tthis.$element.trigger('nodeExpanded', langx.extend(true, {}, node));\n\t\t\t\t}\n\t\t\t}\n\t\t\telse if (!state) {\n\n\t\t\t\t// Collapse a node\n\t\t\t\tnode.state.expanded = false;\n\t\t\t\tif (!options.silent) {\n\t\t\t\t\tthis.$element.trigger('nodeCollapsed', langx.extend(true, {}, node));\n\t\t\t\t}\n\n\t\t\t\t// Collapse child nodes\n\t\t\t\tif (node.nodes && !options.ignoreChildren) {\n\t\t\t\t\tlangx.each(node.nodes, langx.proxy(function (index, node) {\n\t\t\t\t\t\tthis.setExpandedState(node, false, options);\n\t\t\t\t\t}, this));\n\t\t\t\t}\n\t\t\t}\n\t\t},\n\n\t\ttoggleSelectedState : function (node, options) {\n\t\t\tif (!node) return;\n\t\t\tthis.setSelectedState(node, !node.state.selected, options);\n\t\t},\n\n\t\tsetSelectedState : function (node, state, options) {\n\n\t\t\tif (state === node.state.selected) return;\n\n\t\t\tif (state) {\n\n\t\t\t\t// If multiSelect false, unselect previously selected\n\t\t\t\tif (!this.options.multiSelect) {\n\t\t\t\t\tlangx.each(this.findNodes('true', 'g', 'state.selected'), langx.proxy(function (index, node) {\n\t\t\t\t\t\tthis.setSelectedState(node, false, options);\n\t\t\t\t\t}, this));\n\t\t\t\t}\n\n\t\t\t\t// Continue selecting node\n\t\t\t\tnode.state.selected = true;\n\t\t\t\tif (!options.silent) {\n\t\t\t\t\tthis.$element.trigger('nodeSelected', langx.extend(true, {}, node));\n\t\t\t\t}\n\t\t\t}\n\t\t\telse {\n\n\t\t\t\t// Unselect node\n\t\t\t\tnode.state.selected = false;\n\t\t\t\tif (!options.silent) {\n\t\t\t\t\tthis.$element.trigger('nodeUnselected', langx.extend(true, {}, node));\n\t\t\t\t}\n\t\t\t}\n\t\t},\n\n\t\ttoggleCheckedState : function (node, options) {\n\t\t\tif (!node) return;\n\t\t\tthis.setCheckedState(node, !node.state.checked, options);\n\t\t},\n\n\t\tsetCheckedState : function (node, state, options) {\n\n\t\t\tif (state === node.state.checked) return;\n\n\t\t\tif (state) {\n\n\t\t\t\t// Check node\n\t\t\t\tnode.state.checked = true;\n\n\t\t\t\tif (!options.silent) {\n\t\t\t\t\tthis.$element.trigger('nodeChecked', langx.extend(true, {}, node));\n\t\t\t\t}\n\t\t\t}\n\t\t\telse {\n\n\t\t\t\t// Uncheck node\n\t\t\t\tnode.state.checked = false;\n\t\t\t\tif (!options.silent) {\n\t\t\t\t\tthis.$element.trigger('nodeUnchecked', langx.extend(true, {}, node));\n\t\t\t\t}\n\t\t\t}\n\t\t},\n\n\t\tsetDisabledState : function (node, state, options) {\n\n\t\t\tif (state === node.state.disabled) return;\n\n\t\t\tif (state) {\n\n\t\t\t\t// Disable node\n\t\t\t\tnode.state.disabled = true;\n\n\t\t\t\t// Disable all other states\n\t\t\t\tthis.setExpandedState(node, false, options);\n\t\t\t\tthis.setSelectedState(node, false, options);\n\t\t\t\tthis.setCheckedState(node, false, options);\n\n\t\t\t\tif (!options.silent) {\n\t\t\t\t\tthis.$element.trigger('nodeDisabled', langx.extend(true, {}, node));\n\t\t\t\t}\n\t\t\t}\n\t\t\telse {\n\n\t\t\t\t// Enabled node\n\t\t\t\tnode.state.disabled = false;\n\t\t\t\tif (!options.silent) {\n\t\t\t\t\tthis.$element.trigger('nodeEnabled', langx.extend(true, {}, node));\n\t\t\t\t}\n\t\t\t}\n\t\t},\n\n\t\trender : function () {\n\n\t\t\tif (!this.initialized) {\n\n\t\t\t\t// Setup first time only components\n\t\t\t\tthis.$element.addClass(pluginName);\n\t\t\t\tthis.$wrapper = $(this.template.list);\n\n\t\t\t\tthis.injectStyle();\n\n\t\t\t\tthis.initialized = true;\n\t\t\t}\n\n\t\t\tthis.$element.empty().append(this.$wrapper.empty());\n\n\t\t\t// Build tree\n\t\t\tthis.buildTree(this.tree, 0);\n\t\t},\n\n\t\t// Starting from the root node, and recursing down the\n\t\t// structure we build the tree one node at a time\n\t\tbuildTree : function (nodes, level) {\n\n\t\t\tif (!nodes) return;\n\t\t\tlevel += 1;\n\n\t\t\tvar _this = this;\n\t\t\tlangx.each(nodes, function addNodes(id, node) {\n\n\t\t\t\tvar treeItem = $(_this.template.item)\n\t\t\t\t\t.addClass('node-' + _this.elementId)\n\t\t\t\t\t.addClass(node.state.checked ? 'node-checked' : '')\n\t\t\t\t\t.addClass(node.state.disabled ? 'node-disabled': '')\n\t\t\t\t\t.addClass(node.state.selected ? 'node-selected' : '')\n\t\t\t\t\t.addClass(node.searchResult ? 'search-result' : '') \n\t\t\t\t\t.attr('data-nodeid', node.nodeId)\n\t\t\t\t\t.attr('style', _this.buildStyleOverride(node));\n\n\t\t\t\t// Add indent/spacer to mimic tree structure\n\t\t\t\tfor (var i = 0; i < (level - 1); i++) {\n\t\t\t\t\ttreeItem.append(_this.template.indent);\n\t\t\t\t}\n\n\t\t\t\t// Add expand, collapse or empty spacer icons\n\t\t\t\tvar classList = [];\n\t\t\t\tif (node.nodes) {\n\t\t\t\t\tclassList.push('expand-icon');\n\t\t\t\t\tif (node.state.expanded) {\n\t\t\t\t\t\tclassList.push(_this.options.collapseIcon);\n\t\t\t\t\t}\n\t\t\t\t\telse {\n\t\t\t\t\t\tclassList.push(_this.options.expandIcon);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\tclassList.push(_this.options.emptyIcon);\n\t\t\t\t}\n\n\t\t\t\ttreeItem\n\t\t\t\t\t.append($(_this.template.icon)\n\t\t\t\t\t\t.addClass(classList.join(' '))\n\t\t\t\t\t);\n\n\n\t\t\t\t// Add node icon\n\t\t\t\tif (_this.options.showIcon) {\n\t\t\t\t\t\n\t\t\t\t\tvar classList = ['node-icon'];\n\n\t\t\t\t\tclassList.push(node.icon || _this.options.nodeIcon);\n\t\t\t\t\tif (node.state.selected) {\n\t\t\t\t\t\tclassList.pop();\n\t\t\t\t\t\tclassList.push(node.selectedIcon || _this.options.selectedIcon || \n\t\t\t\t\t\t\t\t\t\tnode.icon || _this.options.nodeIcon);\n\t\t\t\t\t}\n\n\t\t\t\t\ttreeItem\n\t\t\t\t\t\t.append($(_this.template.icon)\n\t\t\t\t\t\t\t.addClass(classList.join(' '))\n\t\t\t\t\t\t);\n\t\t\t\t}\n\n\t\t\t\t// Add check / unchecked icon\n\t\t\t\tif (_this.options.showCheckbox) {\n\n\t\t\t\t\tvar classList = ['check-icon'];\n\t\t\t\t\tif (node.state.checked) {\n\t\t\t\t\t\tclassList.push(_this.options.checkedIcon); \n\t\t\t\t\t}\n\t\t\t\t\telse {\n\t\t\t\t\t\tclassList.push(_this.options.uncheckedIcon);\n\t\t\t\t\t}\n\n\t\t\t\t\ttreeItem\n\t\t\t\t\t\t.append($(_this.template.icon)\n\t\t\t\t\t\t\t.addClass(classList.join(' '))\n\t\t\t\t\t\t);\n\t\t\t\t}\n\n\t\t\t\t// Add text\n\t\t\t\tif (_this.options.enableLinks) {\n\t\t\t\t\t// Add hyperlink\n\t\t\t\t\ttreeItem\n\t\t\t\t\t\t.append($(_this.template.link)\n\t\t\t\t\t\t\t.attr('href', node.href)\n\t\t\t\t\t\t\t.append(node.text)\n\t\t\t\t\t\t);\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\t// otherwise just text\n\t\t\t\t\ttreeItem\n\t\t\t\t\t\t.append(node.text);\n\t\t\t\t}\n\n\t\t\t\t// Add tags as badges\n\t\t\t\tif (_this.options.showTags && node.tags) {\n\t\t\t\t\tlangx.each(node.tags, function addTag(id, tag) {\n\t\t\t\t\t\ttreeItem\n\t\t\t\t\t\t\t.append($(_this.template.badge)\n\t\t\t\t\t\t\t\t.append(tag)\n\t\t\t\t\t\t\t);\n\t\t\t\t\t});\n\t\t\t\t}\n\n\t\t\t\t// Add item to the tree\n\t\t\t\t_this.$wrapper.append(treeItem);\n\n\t\t\t\t// Recursively add child ndoes\n\t\t\t\tif (node.nodes && node.state.expanded && !node.state.disabled) {\n\t\t\t\t\treturn _this.buildTree(node.nodes, level);\n\t\t\t\t}\n\t\t\t});\n\t\t},\n\n\t\t// Define any node level style override for\n\t\t// 1. selectedNode\n\t\t// 2. node|data assigned color overrides\n\t\tbuildStyleOverride : function (node) {\n\n\t\t\tif (node.state.disabled) return '';\n\n\t\t\tvar color = node.color;\n\t\t\tvar backColor = node.backColor;\n\n\t\t\tif (this.options.highlightSelected && node.state.selected) {\n\t\t\t\tif (this.options.selectedColor) {\n\t\t\t\t\tcolor = this.options.selectedColor;\n\t\t\t\t}\n\t\t\t\tif (this.options.selectedBackColor) {\n\t\t\t\t\tbackColor = this.options.selectedBackColor;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (this.options.highlightSearchResults && node.searchResult && !node.state.disabled) {\n\t\t\t\tif (this.options.searchResultColor) {\n\t\t\t\t\tcolor = this.options.searchResultColor;\n\t\t\t\t}\n\t\t\t\tif (this.options.searchResultBackColor) {\n\t\t\t\t\tbackColor = this.options.searchResultBackColor;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn 'color:' + color +\n\t\t\t\t';background-color:' + backColor + ';';\n\t\t},\n\n\t\t// Add inline style into head\n\t\tinjectStyle : function () {\n\n\t\t\tif (this.options.injectStyle && !document.getElementById(this.styleId)) {\n\t\t\t\t$('<style type=\"text/css\" id=\"' + this.styleId + '\"> ' + this.buildStyle() + ' </style>').appendTo('head');\n\t\t\t}\n\t\t},\n\n\t\t// Construct trees style based on user options\n\t\tbuildStyle : function () {\n\n\t\t\tvar style = '.node-' + this.elementId + '{';\n\n\t\t\tif (this.options.color) {\n\t\t\t\tstyle += 'color:' + this.options.color + ';';\n\t\t\t}\n\n\t\t\tif (this.options.backColor) {\n\t\t\t\tstyle += 'background-color:' + this.options.backColor + ';';\n\t\t\t}\n\n\t\t\tif (!this.options.showBorder) {\n\t\t\t\tstyle += 'border:none;';\n\t\t\t}\n\t\t\telse if (this.options.borderColor) {\n\t\t\t\tstyle += 'border:1px solid ' + this.options.borderColor + ';';\n\t\t\t}\n\t\t\tstyle += '}';\n\n\t\t\tif (this.options.onhoverColor) {\n\t\t\t\tstyle += '.node-' + this.elementId + ':not(.node-disabled):hover{' +\n\t\t\t\t\t'background-color:' + this.options.onhoverColor + ';' +\n\t\t\t\t'}';\n\t\t\t}\n\n\t\t\treturn this.css + style;\n\t\t},\n\n\t\t/**\n\t\t\tReturns a single node object that matches the given node id.\n\t\t\t@param {Number} nodeId - A node's unique identifier\n\t\t\t@return {Object} node - Matching node\n\t\t*/\n\t\tgetNode : function (nodeId) {\n\t\t\treturn this.nodes[nodeId];\n\t\t},\n\n\t\t/**\n\t\t\tReturns the parent node of a given node, if valid otherwise returns undefined.\n\t\t\t@param {Object|Number} identifier - A valid node or node id\n\t\t\t@returns {Object} node - The parent node\n\t\t*/\n\t\tgetParent : function (identifier) {\n\t\t\tvar node = this.identifyNode(identifier);\n\t\t\treturn this.nodes[node.parentId];\n\t\t},\n\n\t\t/**\n\t\t\tReturns an array of sibling nodes for a given node, if valid otherwise returns undefined.\n\t\t\t@param {Object|Number} identifier - A valid node or node id\n\t\t\t@returns {Array} nodes - Sibling nodes\n\t\t*/\n\t\tgetSiblings : function (identifier) {\n\t\t\tvar node = this.identifyNode(identifier);\n\t\t\tvar parent = this.getParent(node);\n\t\t\tvar nodes = parent ? parent.nodes : this.tree;\n\t\t\treturn nodes.filter(function (obj) {\n\t\t\t\t\treturn obj.nodeId !== node.nodeId;\n\t\t\t\t});\n\t\t},\n\n\t\t/**\n\t\t\tReturns an array of selected nodes.\n\t\t\t@returns {Array} nodes - Selected nodes\n\t\t*/\n\t\tgetSelected : function () {\n\t\t\treturn this.findNodes('true', 'g', 'state.selected');\n\t\t},\n\n\t\t/**\n\t\t\tReturns an array of unselected nodes.\n\t\t\t@returns {Array} nodes - Unselected nodes\n\t\t*/\n\t\tgetUnselected : function () {\n\t\t\treturn this.findNodes('false', 'g', 'state.selected');\n\t\t},\n\n\t\t/**\n\t\t\tReturns an array of expanded nodes.\n\t\t\t@returns {Array} nodes - Expanded nodes\n\t\t*/\n\t\tgetExpanded : function () {\n\t\t\treturn this.findNodes('true', 'g', 'state.expanded');\n\t\t},\n\n\t\t/**\n\t\t\tReturns an array of collapsed nodes.\n\t\t\t@returns {Array} nodes - Collapsed nodes\n\t\t*/\n\t\tgetCollapsed : function () {\n\t\t\treturn this.findNodes('false', 'g', 'state.expanded');\n\t\t},\n\n\t\t/**\n\t\t\tReturns an array of checked nodes.\n\t\t\t@returns {Array} nodes - Checked nodes\n\t\t*/\n\t\tgetChecked : function () {\n\t\t\treturn this.findNodes('true', 'g', 'state.checked');\n\t\t},\n\n\t\t/**\n\t\t\tReturns an array of unchecked nodes.\n\t\t\t@returns {Array} nodes - Unchecked nodes\n\t\t*/\n\t\tgetUnchecked : function () {\n\t\t\treturn this.findNodes('false', 'g', 'state.checked');\n\t\t},\n\n\t\t/**\n\t\t\tReturns an array of disabled nodes.\n\t\t\t@returns {Array} nodes - Disabled nodes\n\t\t*/\n\t\tgetDisabled : function () {\n\t\t\treturn this.findNodes('true', 'g', 'state.disabled');\n\t\t},\n\n\t\t/**\n\t\t\tReturns an array of enabled nodes.\n\t\t\t@returns {Array} nodes - Enabled nodes\n\t\t*/\n\t\tgetEnabled : function () {\n\t\t\treturn this.findNodes('false', 'g', 'state.disabled');\n\t\t},\n\n\n\t\t/**\n\t\t\tSet a node state to selected\n\t\t\t@param {Object|Number} identifiers - A valid node, node id or array of node identifiers\n\t\t\t@param {optional Object} options\n\t\t*/\n\t\tselectNode : function (identifiers, options) {\n\t\t\tthis.forEachIdentifier(identifiers, options, langx.proxy(function (node, options) {\n\t\t\t\tthis.setSelectedState(node, true, options);\n\t\t\t}, this));\n\n\t\t\tthis.render();\n\t\t},\n\n\t\t/**\n\t\t\tSet a node state to unselected\n\t\t\t@param {Object|Number} identifiers - A valid node, node id or array of node identifiers\n\t\t\t@param {optional Object} options\n\t\t*/\n\t\tunselectNode : function (identifiers, options) {\n\t\t\tthis.forEachIdentifier(identifiers, options, langx.proxy(function (node, options) {\n\t\t\t\tthis.setSelectedState(node, false, options);\n\t\t\t}, this));\n\n\t\t\tthis.render();\n\t\t},\n\n\t\t/**\n\t\t\tToggles a node selected state; selecting if unselected, unselecting if selected.\n\t\t\t@param {Object|Number} identifiers - A valid node, node id or array of node identifiers\n\t\t\t@param {optional Object} options\n\t\t*/\n\t\ttoggleNodeSelected : function (identifiers, options) {\n\t\t\tthis.forEachIdentifier(identifiers, options, langx.proxy(function (node, options) {\n\t\t\t\tthis.toggleSelectedState(node, options);\n\t\t\t}, this));\n\n\t\t\tthis.render();\n\t\t},\n\n\n\t\t/**\n\t\t\tCollapse all tree nodes\n\t\t\t@param {optional Object} options\n\t\t*/\n\t\tcollapseAll : function (options) {\n\t\t\tvar identifiers = this.findNodes('true', 'g', 'state.expanded');\n\t\t\tthis.forEachIdentifier(identifiers, options, langx.proxy(function (node, options) {\n\t\t\t\tthis.setExpandedState(node, false, options);\n\t\t\t}, this));\n\n\t\t\tthis.render();\n\t\t},\n\n\t\t/**\n\t\t\tCollapse a given tree node\n\t\t\t@param {Object|Number} identifiers - A valid node, node id or array of node identifiers\n\t\t\t@param {optional Object} options\n\t\t*/\n\t\tcollapseNode : function (identifiers, options) {\n\t\t\tthis.forEachIdentifier(identifiers, options, langx.proxy(function (node, options) {\n\t\t\t\tthis.setExpandedState(node, false, options);\n\t\t\t}, this));\n\n\t\t\tthis.render();\n\t\t},\n\n\t\t/**\n\t\t\tExpand all tree nodes\n\t\t\t@param {optional Object} options\n\t\t*/\n\t\texpandAll : function (options) {\n\t\t\toptions = langx.extend({}, _default.options, options);\n\n\t\t\tif (options && options.levels) {\n\t\t\t\tthis.expandLevels(this.tree, options.levels, options);\n\t\t\t}\n\t\t\telse {\n\t\t\t\tvar identifiers = this.findNodes('false', 'g', 'state.expanded');\n\t\t\t\tthis.forEachIdentifier(identifiers, options, langx.proxy(function (node, options) {\n\t\t\t\t\tthis.setExpandedState(node, true, options);\n\t\t\t\t}, this));\n\t\t\t}\n\n\t\t\tthis.render();\n\t\t},\n\n\t\t/**\n\t\t\tExpand a given tree node\n\t\t\t@param {Object|Number} identifiers - A valid node, node id or array of node identifiers\n\t\t\t@param {optional Object} options\n\t\t*/\n\t\texpandNode : function (identifiers, options) {\n\t\t\tthis.forEachIdentifier(identifiers, options, langx.proxy(function (node, options) {\n\t\t\t\tthis.setExpandedState(node, true, options);\n\t\t\t\tif (node.nodes && (options && options.levels)) {\n\t\t\t\t\tthis.expandLevels(node.nodes, options.levels-1, options);\n\t\t\t\t}\n\t\t\t}, this));\n\n\t\t\tthis.render();\n\t\t},\n\n\t\texpandLevels : function (nodes, level, options) {\n\t\t\toptions = langx.extend({}, _default.options, options);\n\n\t\t\tlangx.each(nodes, langx.proxy(function (index, node) {\n\t\t\t\tthis.setExpandedState(node, (level > 0) ? true : false, options);\n\t\t\t\tif (node.nodes) {\n\t\t\t\t\tthis.expandLevels(node.nodes, level-1, options);\n\t\t\t\t}\n\t\t\t}, this));\n\t\t},\n\n\t\t/**\n\t\t\tReveals a given tree node, expanding the tree from node to root.\n\t\t\t@param {Object|Number|Array} identifiers - A valid node, node id or array of node identifiers\n\t\t\t@param {optional Object} options\n\t\t*/\n\t\trevealNode : function (identifiers, options) {\n\t\t\tthis.forEachIdentifier(identifiers, options, langx.proxy(function (node, options) {\n\t\t\t\tvar parentNode = this.getParent(node);\n\t\t\t\twhile (parentNode) {\n\t\t\t\t\tthis.setExpandedState(parentNode, true, options);\n\t\t\t\t\tparentNode = this.getParent(parentNode);\n\t\t\t\t}\n\t\t\t}, this));\n\n\t\t\tthis.render();\n\t\t},\n\n\t\t/**\n\t\t\tToggles a nodes expanded state; collapsing if expanded, expanding if collapsed.\n\t\t\t@param {Object|Number} identifiers - A valid node, node id or array of node identifiers\n\t\t\t@param {optional Object} options\n\t\t*/\n\t\ttoggleNodeExpanded : function (identifiers, options) {\n\t\t\tthis.forEachIdentifier(identifiers, options, langx.proxy(function (node, options) {\n\t\t\t\tthis.toggleExpandedState(node, options);\n\t\t\t}, this));\n\t\t\t\n\t\t\tthis.render();\n\t\t},\n\n\n\t\t/**\n\t\t\tCheck all tree nodes\n\t\t\t@param {optional Object} options\n\t\t*/\n\t\tcheckAll : function (options) {\n\t\t\tvar identifiers = this.findNodes('false', 'g', 'state.checked');\n\t\t\tthis.forEachIdentifier(identifiers, options, langx.proxy(function (node, options) {\n\t\t\t\tthis.setCheckedState(node, true, options);\n\t\t\t}, this));\n\n\t\t\tthis.render();\n\t\t},\n\n\t\t/**\n\t\t\tCheck a given tree node\n\t\t\t@param {Object|Number} identifiers - A valid node, node id or array of node identifiers\n\t\t\t@param {optional Object} options\n\t\t*/\n\t\tcheckNode : function (identifiers, options) {\n\t\t\tthis.forEachIdentifier(identifiers, options, langx.proxy(function (node, options) {\n\t\t\t\tthis.setCheckedState(node, true, options);\n\t\t\t}, this));\n\n\t\t\tthis.render();\n\t\t},\n\n\t\t/**\n\t\t\tUncheck all tree nodes\n\t\t\t@param {optional Object} options\n\t\t*/\n\t\tuncheckAll : function (options) {\n\t\t\tvar identifiers = this.findNodes('true', 'g', 'state.checked');\n\t\t\tthis.forEachIdentifier(identifiers, options, langx.proxy(function (node, options) {\n\t\t\t\tthis.setCheckedState(node, false, options);\n\t\t\t}, this));\n\n\t\t\tthis.render();\n\t\t},\n\n\t\t/**\n\t\t\tUncheck a given tree node\n\t\t\t@param {Object|Number} identifiers - A valid node, node id or array of node identifiers\n\t\t\t@param {optional Object} options\n\t\t*/\n\t\tuncheckNode : function (identifiers, options) {\n\t\t\tthis.forEachIdentifier(identifiers, options, langx.proxy(function (node, options) {\n\t\t\t\tthis.setCheckedState(node, false, options);\n\t\t\t}, this));\n\n\t\t\tthis.render();\n\t\t},\n\n\t\t/**\n\t\t\tToggles a nodes checked state; checking if unchecked, unchecking if checked.\n\t\t\t@param {Object|Number} identifiers - A valid node, node id or array of node identifiers\n\t\t\t@param {optional Object} options\n\t\t*/\n\t\ttoggleNodeChecked : function (identifiers, options) {\n\t\t\tthis.forEachIdentifier(identifiers, options, langx.proxy(function (node, options) {\n\t\t\t\tthis.toggleCheckedState(node, options);\n\t\t\t}, this));\n\n\t\t\tthis.render();\n\t\t},\n\n\n\t\t/**\n\t\t\tDisable all tree nodes\n\t\t\t@param {optional Object} options\n\t\t*/\n\t\tdisableAll : function (options) {\n\t\t\tvar identifiers = this.findNodes('false', 'g', 'state.disabled');\n\t\t\tthis.forEachIdentifier(identifiers, options, langx.proxy(function (node, options) {\n\t\t\t\tthis.setDisabledState(node, true, options);\n\t\t\t}, this));\n\n\t\t\tthis.render();\n\t\t},\n\n\t\t/**\n\t\t\tDisable a given tree node\n\t\t\t@param {Object|Number} identifiers - A valid node, node id or array of node identifiers\n\t\t\t@param {optional Object} options\n\t\t*/\n\t\tdisableNode : function (identifiers, options) {\n\t\t\tthis.forEachIdentifier(identifiers, options, langx.proxy(function (node, options) {\n\t\t\t\tthis.setDisabledState(node, true, options);\n\t\t\t}, this));\n\n\t\t\tthis.render();\n\t\t},\n\n\t\t/**\n\t\t\tEnable all tree nodes\n\t\t\t@param {optional Object} options\n\t\t*/\n\t\tenableAll : function (options) {\n\t\t\tvar identifiers = this.findNodes('true', 'g', 'state.disabled');\n\t\t\tthis.forEachIdentifier(identifiers, options, langx.proxy(function (node, options) {\n\t\t\t\tthis.setDisabledState(node, false, options);\n\t\t\t}, this));\n\n\t\t\tthis.render();\n\t\t},\n\n\t\t/**\n\t\t\tEnable a given tree node\n\t\t\t@param {Object|Number} identifiers - A valid node, node id or array of node identifiers\n\t\t\t@param {optional Object} options\n\t\t*/\n\t\tenableNode : function (identifiers, options) {\n\t\t\tthis.forEachIdentifier(identifiers, options, langx.proxy(function (node, options) {\n\t\t\t\tthis.setDisabledState(node, false, options);\n\t\t\t}, this));\n\n\t\t\tthis.render();\n\t\t},\n\n\t\t/**\n\t\t\tToggles a nodes disabled state; disabling is enabled, enabling if disabled.\n\t\t\t@param {Object|Number} identifiers - A valid node, node id or array of node identifiers\n\t\t\t@param {optional Object} options\n\t\t*/\n\t\ttoggleNodeDisabled : function (identifiers, options) {\n\t\t\tthis.forEachIdentifier(identifiers, options, langx.proxy(function (node, options) {\n\t\t\t\tthis.setDisabledState(node, !node.state.disabled, options);\n\t\t\t}, this));\n\n\t\t\tthis.render();\n\t\t},\n\n\n\t\t/**\n\t\t\tCommon code for processing multiple identifiers\n\t\t*/\n\t\tforEachIdentifier : function (identifiers, options, callback) {\n\n\t\t\toptions = langx.extend({}, _default.options, options);\n\n\t\t\tif (!(identifiers instanceof Array)) {\n\t\t\t\tidentifiers = [identifiers];\n\t\t\t}\n\n\t\t\tlangx.each(identifiers, langx.proxy(function (index, identifier) {\n\t\t\t\tcallback(this.identifyNode(identifier), options);\n\t\t\t}, this));\t\n\t\t},\n\n\t\t/*\n\t\t\tIdentifies a node from either a node id or object\n\t\t*/\n\t\tidentifyNode : function (identifier) {\n\t\t\treturn ((typeof identifier) === 'number') ?\n\t\t\t\t\t\t\tthis.nodes[identifier] :\n\t\t\t\t\t\t\tidentifier;\n\t\t},\n\n\t\t/**\n\t\t\tSearches the tree for nodes (text) that match given criteria\n\t\t\t@param {String} pattern - A given string to match against\n\t\t\t@param {optional Object} options - Search criteria options\n\t\t\t@return {Array} nodes - Matching nodes\n\t\t*/\n\t\tsearch : function (pattern, options) {\n\t\t\toptions = langx.extend({}, _default.searchOptions, options);\n\n\t\t\tthis.clearSearch({ render: false });\n\n\t\t\tvar results = [];\n\t\t\tif (pattern && pattern.length > 0) {\n\n\t\t\t\tif (options.exactMatch) {\n\t\t\t\t\tpattern = '^' + pattern + '$';\n\t\t\t\t}\n\n\t\t\t\tvar modifier = 'g';\n\t\t\t\tif (options.ignoreCase) {\n\t\t\t\t\tmodifier += 'i';\n\t\t\t\t}\n\n\t\t\t\tresults = this.findNodes(pattern, modifier);\n\n\t\t\t\t// Add searchResult property to all matching nodes\n\t\t\t\t// This will be used to apply custom styles\n\t\t\t\t// and when identifying result to be cleared\n\t\t\t\tlangx.each(results, function (index, node) {\n\t\t\t\t\tnode.searchResult = true;\n\t\t\t\t})\n\t\t\t}\n\n\t\t\t// If revealResults, then render is triggered from revealNode\n\t\t\t// otherwise we just call render.\n\t\t\tif (options.revealResults) {\n\t\t\t\tthis.revealNode(results);\n\t\t\t}\n\t\t\telse {\n\t\t\t\tthis.render();\n\t\t\t}\n\n\t\t\tthis.$element.trigger('searchComplete', langx.extend(true, {}, results));\n\n\t\t\treturn results;\n\t\t},\n\n\t\t/**\n\t\t\tClears previous search results\n\t\t*/\n\t\tclearSearch : function (options) {\n\n\t\t\toptions = langx.extend({}, { render: true }, options);\n\n\t\t\tvar results = langx.each(this.findNodes('true', 'g', 'searchResult'), function (index, node) {\n\t\t\t\tnode.searchResult = false;\n\t\t\t});\n\n\t\t\tif (options.render) {\n\t\t\t\tthis.render();\t\n\t\t\t}\n\t\t\t\n\t\t\tthis.$element.trigger('searchCleared', langx.extend(true, {}, results));\n\t\t},\n\n\t\t/**\n\t\t\tFind nodes that match a given criteria\n\t\t\t@param {String} pattern - A given string to match against\n\t\t\t@param {optional String} modifier - Valid RegEx modifiers\n\t\t\t@param {optional String} attribute - Attribute to compare pattern against\n\t\t\t@return {Array} nodes - Nodes that match your criteria\n\t\t*/\n\t\tfindNodes : function (pattern, modifier, attribute) {\n\n\t\t\tmodifier = modifier || 'g';\n\t\t\tattribute = attribute || 'text';\n\n\t\t\tvar _this = this;\n\t\t\treturn langx.grep(this.nodes, function (node) {\n\t\t\t\tvar val = _this.getNodeValue(node, attribute);\n\t\t\t\tif (typeof val === 'string') {\n\t\t\t\t\treturn val.match(new RegExp(pattern, modifier));\n\t\t\t\t}\n\t\t\t});\n\t\t},\n\n\t\t/**\n\t\t\tRecursive find for retrieving nested attributes values\n\t\t\tAll values are return as strings, unless invalid\n\t\t\t@param {Object} obj - Typically a node, could be any object\n\t\t\t@param {String} attr - Identifies an object property using dot notation\n\t\t\t@return {String} value - Matching attributes string representation\n\t\t*/\n\t\tgetNodeValue : function (obj, attr) {\n\t\t\tvar index = attr.indexOf('.');\n\t\t\tif (index > 0) {\n\t\t\t\tvar _obj = obj[attr.substring(0, index)];\n\t\t\t\tvar _attr = attr.substring(index + 1, attr.length);\n\t\t\t\treturn this.getNodeValue(_obj, _attr);\n\t\t\t}\n\t\t\telse {\n\t\t\t\tif (obj.hasOwnProperty(attr)) {\n\t\t\t\t\treturn obj[attr].toString();\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\treturn undefined;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t});\n\n\tvar logError = function (message) {\n\t\tif (window.console) {\n\t\t\twindow.console.error(message);\n\t\t}\n\t};\n\n\n    plugins.register(TreeView,\"treeview\",function(options,args){\n\t\tif (typeof options === 'string') {\n\t\t\tif (!(args instanceof Array)) {\n\t\t\t\targs = [ args ];\n\t\t\t}\n\t\t\treturn this[options].apply(this, args);\n\t\t} else if (typeof options === 'boolean') {\n\t\t\treturn  this;\n\t\t} else {\n//\t\t\tthis.init(options);\n\t\t\treturn this;\n\t\t}\n\n    });\n\n\treturn skylark.attach(\"intg.bs3.TreeView\",TreeView);\n});\ndefine('skylark-bootstrap-treeview/main',[\r\n\t\"./TreeView\"\r\n],function(TreeView){\r\n\treturn TreeView;\r\n});\ndefine('skylark-bootstrap-treeview', ['skylark-bootstrap-treeview/main'], function (main) { return main; });\n\n"]}